<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lavalink4NET</name>
    </assembly>
    <members>
        <member name="T:Lavalink4NET.Cluster.LavalinkCluster">
            <summary>
                A set of lavalink nodes bound to a cluster usable for voice node balancing.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.#ctor(Lavalink4NET.Cluster.LavalinkClusterOptions,Lavalink4NET.IDiscordClientWrapper,Lavalink4NET.Logging.ILogger,Lavalink4NET.ILavalinkCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Cluster.LavalinkCluster"/> class.
            </summary>
            <param name="options">the cluster options</param>
            <param name="client">the discord client</param>
            <param name="logger">the logger</param>
            <param name="cache">
                a cache that is shared between the different lavalink rest clients. If the cache is
                <see langword="null"/>, no cache will be used.
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="options"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="client"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="E:Lavalink4NET.Cluster.LavalinkCluster.NodeConnected">
            <summary>
                An asynchronous event triggered when a node connected.
            </summary>
        </member>
        <member name="E:Lavalink4NET.Cluster.LavalinkCluster.NodeDisconnected">
            <summary>
                An asynchronous event triggered when a node disconnected.
            </summary>
        </member>
        <member name="E:Lavalink4NET.Cluster.LavalinkCluster.PlayerMoved">
            <summary>
                Asynchronous event which is dispatched when a player was moved.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkCluster.Nodes">
            <summary>
                Gets all nodes.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkCluster.StayOnline">
            <summary>
                Gets or sets a value indicating whether stay-online should be enabled for the cluster.
            </summary>
            <remarks>
                When this option is enabled, the cluster will try to move the players of a
                disconnected node to a new.
            </remarks>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.AddNodeAsync(Lavalink4NET.LavalinkNodeOptions)">
            <summary>
                Dynamically adds a node to the cluster asynchronously.
            </summary>
            <param name="nodeOptions">the node connection options</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the cluster node info created for the node</para>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.Dispose">
            <summary>
                Disposes all underlying nodes.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetPlayer(System.UInt64)">
            <summary>
                Gets the audio player for the specified <paramref name="guildId"/>.
            </summary>
            <param name="guildId">the guild identifier to get the player for</param>
            <returns>the player for the guild</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetPlayer``1(System.UInt64)">
            <summary>
                Gets the audio player for the specified <paramref name="guildId"/>.
            </summary>
            <typeparam name="TPlayer">the type of the player to use</typeparam>
            <param name="guildId">the guild identifier to get the player for</param>
            <returns>the player for the guild</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the cluster has not been initialized.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetPlayers``1">
            <summary>
                Gets all players of the specified <typeparamref name="TPlayer"/>.
            </summary>
            <typeparam name="TPlayer">
                the type of the players to get; use <see cref="T:Lavalink4NET.Player.LavalinkPlayer"/> to get all players
            </typeparam>
            <returns>the player list</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetPreferredNode">
            <summary>
                Gets the preferred node using the <see cref="T:Lavalink4NET.Cluster.LoadBalancingStrategy"/> specified in
                the options.
            </summary>
            <returns>the next preferred node</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the cluster has not been initialized.
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if no nodes is available</exception>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetServingNode(System.UInt64)">
            <summary>
                Gets the node that serves the guild specified by <paramref name="guildId"/> (if no
                node serves the guild, <see cref="M:Lavalink4NET.Cluster.LavalinkCluster.GetPreferredNode"/> is used).
            </summary>
            <param name="guildId">the guild snowflake identifier</param>
            <returns>the serving node for the specified <paramref name="guildId"/></returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the cluster has not been initialized.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetTrackAsync(System.String,Lavalink4NET.Rest.SearchMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Gets the track for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <param name="noCache">
                a value indicating whether the track should be returned from cache, if it is cached.
                Note this parameter does only take any effect is a cache provider is specified in constructor.
            </param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result is the track
                found for the specified <paramref name="query"/>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetTracksAsync(System.String,Lavalink4NET.Rest.SearchMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Gets the tracks for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <param name="noCache">
                a value indicating whether the track should be returned from cache, if it is cached.
                Note this parameter does only take any effect is a cache provider is specified in constructor.
            </param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result are the tracks
                found for the specified <paramref name="query"/>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.HasPlayer(System.UInt64)">
            <summary>
                Gets a value indicating whether a player is created for the specified <paramref name="guildId"/>.
            </summary>
            <param name="guildId">
                the snowflake identifier of the guild to create the player for
            </param>
            <returns>
                a value indicating whether a player is created for the specified <paramref name="guildId"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the cluster has not been initialized.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.InitializeAsync">
            <summary>
                Initializes all nodes asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.JoinAsync(System.UInt64,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the audio player</para>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.JoinAsync``1(System.UInt64,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the audio player</para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the cluster has not been initialized.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.LoadTracksAsync(System.String,Lavalink4NET.Rest.SearchMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Loads the tracks specified by the <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the search query</param>
            <param name="mode">the track search mode</param>
            <param name="noCache">
                a value indicating whether the track should be returned from cache, if it is cached.
                Note this parameter does only take any effect is a cache provider is specified in constructor.
            </param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result is the request
                response for the specified <paramref name="query"/>.
            </returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.NodeConnectedAsync(Lavalink4NET.Cluster.LavalinkClusterNode,Lavalink4NET.Events.ConnectedEventArgs)">
            <summary>
                An internal callback when a cluster node connected to the cluster asynchronously.
            </summary>
            <param name="node">the node where the connection was opened</param>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.NodeDisconnectedAsync(Lavalink4NET.Cluster.LavalinkClusterNode,Lavalink4NET.Events.DisconnectedEventArgs)">
            <summary>
                An internal callback when a cluster node disconnected from the cluster asynchronously.
            </summary>
            <param name="node">the node where the connection was closed</param>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.OnNodeConnectedAsync(Lavalink4NET.Events.NodeConnectedEventArgs)">
            <summary>
                Triggers the <see cref="E:Lavalink4NET.Cluster.LavalinkCluster.NodeConnected"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.OnNodeDisconnectedAsync(Lavalink4NET.Events.NodeDisconnectedEventArgs)">
            <summary>
                Triggers the <see cref="E:Lavalink4NET.Cluster.LavalinkCluster.NodeDisconnected"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.OnPlayerMovedAsync(Lavalink4NET.Events.PlayerMovedEventArgs)">
            <summary>
                Dispatches the <see cref="E:Lavalink4NET.Cluster.LavalinkCluster.PlayerMoved"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments passed with the event</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.CreateNode(Lavalink4NET.LavalinkNodeOptions)">
            <summary>
                Creates a new lavalink cluster node.
            </summary>
            <param name="nodeOptions">the node options</param>
            <returns>the created node</returns>
        </member>
        <member name="T:Lavalink4NET.Cluster.LavalinkClusterNode">
            <summary>
                A clustered lavalink node with additional information.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkClusterNode.#ctor(Lavalink4NET.Cluster.LavalinkCluster,Lavalink4NET.LavalinkNodeOptions,Lavalink4NET.IDiscordClientWrapper,Lavalink4NET.Logging.ILogger,Lavalink4NET.ILavalinkCache,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.LavalinkNode"/> class.
            </summary>
            <param name="cluster">the cluster</param>
            <param name="options">the node options for connecting</param>
            <param name="client">the discord client</param>
            <param name="logger">the logger</param>
            <param name="cache">an optional cache that caches track requests</param>
            <param name="id">the node number</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="cluster"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="options"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="client"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkClusterNode.Cluster">
            <summary>
                Gets the cluster owning the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkClusterNode.Identifier">
            <summary>
                Gets an identifier that is used to identify the node (used for debugging or logging).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkClusterNode.LastUsage">
            <summary>
                Gets the coordinated universal time (UTC) point of the last usage of the node.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkClusterNode.OnConnectedAsync(Lavalink4NET.Events.ConnectedEventArgs)">
            <summary>
                Triggers the <see cref="E:Lavalink4NET.LavalinkSocket.Connected"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronously operation.</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkClusterNode.OnDisconnectedAsync(Lavalink4NET.Events.DisconnectedEventArgs)">
            <summary>
                Triggers the <see cref="E:Lavalink4NET.LavalinkSocket.Disconnected"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronously operation.</returns>
        </member>
        <member name="T:Lavalink4NET.Cluster.LavalinkClusterOptions">
            <summary>
                The options for a lavalink cluster ( <see cref="T:Lavalink4NET.Cluster.LavalinkCluster"/>).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkClusterOptions.LoadBalacingStrategy">
            <summary>
                Gets or sets the load balancing strategy to use.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkClusterOptions.Nodes">
            <summary>
                Gets or sets the cluster node options.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkClusterOptions.StayOnline">
            <summary>
                Gets or sets a value indicating whether players should be moved to a new node if a
                node disconnects accidentally.
            </summary>
            <remarks>
                This property defaults to <see langword="false"/>, because this feature is very experimental.
            </remarks>
        </member>
        <member name="T:Lavalink4NET.Cluster.LoadBalancingStrategies">
            <summary>
                Provides a set of load balancing strategies.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LoadBalancingStrategies.LeastPlayersStrategy">
            <summary>
                The load-balancing strategy that uses the node that has the least-playing player.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LoadBalancingStrategies.LoadStrategy">
            <summary>
                The load strategy favors the node that is less used (with the lowest system load).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LoadBalancingStrategies.RoundRobinStrategy">
            <summary>
                The round robin load balancing strategy favors the node that has not been used the longest.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LoadBalancingStrategies.ScoreStrategy">
            <summary>
                The score strategy favors the node that has the highest score (higher = better).
            </summary>
        </member>
        <member name="M:Lavalink4NET.Cluster.LoadBalancingStrategies.CalculateScore(Lavalink4NET.Statistics.NodeStatistics)">
            <summary>
                Calculates the node score.
            </summary>
            <param name="statistics">the node statistics</param>
            <returns>the score for the node (higher = better)</returns>
        </member>
        <member name="T:Lavalink4NET.Cluster.LoadBalancingStrategy">
            <summary>
                Gets a suitable node using the load balancing strategy.
            </summary>
            <param name="cluster">the cluster</param>
            <param name="nodes">the nodes</param>
            <returns>the preferred node</returns>
        </member>
        <member name="T:Lavalink4NET.Decoding.DataInputReader">
            <summary>
                A C# port for the DataInput stream (used to decode Lavalink tracks).
            </summary>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.#ctor(System.IO.Stream,Lavalink4NET.Decoding.Endianness,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Decoding.DataInputReader"/> class.
            </summary>
            <param name="baseStream">the base stream to read from</param>
            <param name="endianness">the input stream endianness</param>
            <param name="leaveOpen">
                a value indicating whether the stream should be left open when disposing
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="baseStream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Decoding.DataInputReader.BaseStream">
            <summary>
                Gets the base stream to read from.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Decoding.DataInputReader.Endianness">
            <summary>
                Gets the source stream endianness.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadBytes(System.Int32)">
            <summary>
                Reads bytes from the stream.
            </summary>
            <param name="count">the number of bytes to read</param>
            <returns>the read bytes</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of the <see cref="P:Lavalink4NET.Decoding.DataInputReader.BaseStream"/> was reached.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadInt16">
            <summary>
                Reads a <see cref="T:System.Int16"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadInt32">
            <summary>
                Reads a <see cref="T:System.Int32"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadInt64">
            <summary>
                Reads a <see cref="T:System.Int64"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadSingle">
            <summary>
                Reads a <see cref="T:System.Single"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadUInt16">
            <summary>
                Reads an <see cref="T:System.UInt16"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadUInt32">
            <summary>
                Reads an <see cref="T:System.UInt32"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadUInt64">
            <summary>
                Reads an <see cref="T:System.UInt64"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadBoolean">
            <summary>
                Reads a <see cref="T:System.Boolean"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadByte">
            <summary>
                Reads a <see cref="T:System.Byte"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadSByte">
            <summary>
                Reads a <see cref="T:System.SByte"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadString">
            <summary>
                Reads an UTF-8 string from the stream.
            </summary>
            <returns>the read string</returns>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.Dispose">
            <summary>
                Disposes the underlying <see cref="P:Lavalink4NET.Decoding.DataInputReader.BaseStream"/>, if specified in constructor (!leaveOpen).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Decoding.EndianConverter">
            <summary>
                A utility class for conversion around endianness.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Decoding.EndianConverter.SystemEndianess">
            <summary>
                Gets the system endianness.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Decoding.EndianConverter.Convert(System.Byte[],Lavalink4NET.Decoding.Endianness,Lavalink4NET.Decoding.Endianness)">
            <summary>
                Converts the <paramref name="data"/> endianness.
            </summary>
            <param name="data">the data to convert</param>
            <param name="source">the source endianness</param>
            <param name="target">the target endianness</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Lavalink4NET.Decoding.Endianness">
            <summary>
                The different endian types (without MiddleEndian).
            </summary>
        </member>
        <member name="F:Lavalink4NET.Decoding.Endianness.BigEndian">
            <summary>
                The big-endian byte order.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Decoding.Endianness.LittleEndian">
            <summary>
                The little-endian byte order.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Decoding.TrackDecoder">
            <summary>
                An utility class for decoding lavalink tracks.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Decoding.TrackDecoder.DecodeTrack(System.String,System.Boolean)">
            <summary>
                Decodes a lavalink track identifier.
            </summary>
            <param name="identifier">the track identifier (encoded in base64)</param>
            <param name="verify">a value indicating whether the track header should be verified</param>
            <returns>the decoded track</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the track header is invalid</exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.TrackDecoder.DecodeTrackInfo(System.String,System.Boolean)">
            <summary>
                Decodes a lavalink track identifier.
            </summary>
            <param name="identifier">the track identifier (encoded in base64)</param>
            <param name="verify">a value indicating whether the track header should be verified</param>
            <returns>the decoded track info</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the track header is invalid</exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.TrackDecoder.DecodeTrackInfo(System.Byte[],System.Boolean)">
            <summary>
                Decodes a lavalink track identifier.
            </summary>
            <param name="buffer">the raw track identifier</param>
            <param name="verify">a value indicating whether the track header should be verified</param>
            <returns>the decoded track info</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the track header is invalid</exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.TrackDecoder.ReadHeader(Lavalink4NET.Decoding.DataInputReader,System.Int32,System.Boolean)">
            <summary>
                Reads the track header.
            </summary>
            <param name="reader">the reader to read from</param>
            <param name="length">the length of raw binary data</param>
            <param name="verify">a value indicating whether the track header should be verified</param>
            <exception cref="T:System.InvalidOperationException">thrown if the track header is invalid</exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Lavalink4NET.Events.AsyncEventExtensions">
            <summary>
                Extension method for asynchronous events.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.AsyncEventExtensions.InvokeAsync(Lavalink4NET.Events.AsyncEventHandler,System.Object,System.EventArgs)">
            <summary>
                Invokes an asynchronous event.
            </summary>
            <param name="eventHandler">the asynchronous event handler</param>
            <param name="sender">the object that is firing the event</param>
            <param name="eventArgs">
                the event parameters (if <see langword="null"/><see cref="F:System.EventArgs.Empty"/> is used)
            </param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Events.AsyncEventExtensions.InvokeAsync``1(Lavalink4NET.Events.AsyncEventHandler{``0},System.Object,``0)">
            <summary>
                Invokes an asynchronous event.
            </summary>
            <typeparam name="TEventArgs">the type of the event parameters</typeparam>
            <param name="eventHandler">the asynchronous event handler</param>
            <param name="sender">the object that is firing the event</param>
            <param name="eventArgs">the event parameters</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Events.AsyncEventHandler`1">
            <summary>
                An asynchronous event handler.
            </summary>
            <typeparam name="TEventArgs">the type of the event arguments</typeparam>
            <param name="sender">the object that fired the event</param>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Events.AsyncEventHandler">
            <summary>
                An asynchronous event handler.
            </summary>
            <param name="sender">the object that fired the event</param>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Events.ConnectedEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkSocket.Connected"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.ConnectedEventArgs.#ctor(System.Uri,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.ConnectedEventArgs"/> class.
            </summary>
            <param name="uri">the URI connect / reconnected / disconnected from / to</param>
            <param name="wasReconnect">a value indicating whether the connect was a reconnect</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="uri"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.ConnectedEventArgs.WasReconnect">
            <summary>
                Gets a value indicating whether the connect was a reconnect.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.ConnectionEventArgs">
            <summary>
                Event arguments for an event that indicates a connect action happened.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.ConnectionEventArgs.#ctor(System.Uri)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.ConnectionEventArgs"/> class.
            </summary>
            <param name="uri">the URI connect / reconnected / disconnected from / to</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="uri"/> is <see langword="null"/>.
            </exception>
            w
        </member>
        <member name="P:Lavalink4NET.Events.ConnectionEventArgs.Uri">
            <summary>
                Gets the URI connect / reconnected / disconnected from / to.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.DisconnectedEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkSocket.Disconnected"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.DisconnectedEventArgs.#ctor(System.Uri,System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.DisconnectedEventArgs"/> class.
            </summary>
            <param name="uri">the URI connect / reconnected / disconnected from / to</param>
            <param name="closeStatus">the close status</param>
            <param name="reason">the close reason</param>
            <param name="byRemote">
                a value indicating whether the connection was closed by the remote endpoint.
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="uri"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.DisconnectedEventArgs.CloseStatus">
            <summary>
                Gets the close status.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.DisconnectedEventArgs.Reason">
            <summary>
                Gets the close reason.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.DisconnectedEventArgs.ByRemote">
            <summary>
                Gets a value indicating whether the connection was closed by the remote endpoint.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.NodeConnectedEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.Cluster.LavalinkCluster.NodeConnected"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.NodeConnectedEventArgs.#ctor(Lavalink4NET.Cluster.LavalinkClusterNode,System.Uri,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.NodeConnectedEventArgs"/> class.
            </summary>
            <param name="node">the node that connected</param>
            <param name="uri">the URI connect / reconnected / disconnected from / to</param>
            <param name="wasReconnect">a value indicating whether the connect was a reconnect</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="uri"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Events.NodeConnectedEventArgs.#ctor(Lavalink4NET.Cluster.LavalinkClusterNode,Lavalink4NET.Events.ConnectedEventArgs)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.NodeConnectedEventArgs"/> class.
            </summary>
            <param name="node">the node that connected</param>
            <param name="eventArgs">the event arguments to copy</param>
        </member>
        <member name="P:Lavalink4NET.Events.NodeConnectedEventArgs.Node">
            <summary>
                Gets the node that connected.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.NodeDisconnectedEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.Cluster.LavalinkCluster.NodeDisconnected"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.NodeDisconnectedEventArgs.#ctor(Lavalink4NET.Cluster.LavalinkClusterNode,System.Uri,System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.NodeDisconnectedEventArgs"/> class.
            </summary>
            <param name="node">the node that disconnected</param>
            <param name="uri">the URI connect / reconnected / disconnected from / to</param>
            <param name="closeStatus">the close status</param>
            <param name="reason">the close reason</param>
            <param name="byRemote">
                a value indicating whether the connection was closed by the remote endpoint.
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="uri"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Events.NodeDisconnectedEventArgs.#ctor(Lavalink4NET.Cluster.LavalinkClusterNode,Lavalink4NET.Events.DisconnectedEventArgs)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.NodeDisconnectedEventArgs"/> class.
            </summary>
            <param name="node">the node that connected</param>
            <param name="eventArgs">the event arguments to copy</param>
        </member>
        <member name="P:Lavalink4NET.Events.NodeDisconnectedEventArgs.Node">
            <summary>
                Gets the node that disconnected.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.NodeStatisticsUpdateEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.StatisticsUpdated"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.NodeStatisticsUpdateEventArgs.#ctor(Lavalink4NET.Statistics.NodeStatistics)">
            <summary>
                Initializes a new instance of the No
            </summary>
            <param name="statistics">the statistics for the node</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="statistics"/> parameter is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.NodeStatisticsUpdateEventArgs.Statistics">
            <summary>
                Gets the statistics for the node.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.PayloadReceivedEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkSocket.PayloadReceived"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.PayloadReceivedEventArgs.#ctor(Lavalink4NET.Payloads.IPayload,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.PayloadReceivedEventArgs"/> class.
            </summary>
            <param name="payload">the payload that was received</param>
            <param name="rawJson">the raw JSON object content of the payload</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="payload"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                the specified <paramref name="rawJson"/> is blank.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.PayloadReceivedEventArgs.Payload">
            <summary>
                Gets the payload that was received.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.PayloadReceivedEventArgs.RawJson">
            <summary>
                Gets the raw JSON object content of the payload.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.PlayerConnectedEventArgs">
            <summary>
                Event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.PlayerConnected"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.PlayerConnectedEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer,System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.PlayerConnectedEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <param name="voiceChannelId">
                the snowflake identifier of the voice channel connected to
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.PlayerConnectedEventArgs.VoiceChannelId">
            <summary>
                Gets the snowflake identifier of the voice channel connected to.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.PlayerDisconnectCause">
            <summary>
                A set of possible player disconnection causes.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Events.PlayerDisconnectCause.Stop">
            <summary>
                Denotes that the player was stopped and disconnected (needs
                <see cref="P:Lavalink4NET.LavalinkNodeOptions.DisconnectOnStop"/> enabled).
            </summary>
        </member>
        <member name="F:Lavalink4NET.Events.PlayerDisconnectCause.Dispose">
            <summary>
                Denotes that the player was disconnected due disposal.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Events.PlayerDisconnectCause.Disconnected">
            <summary>
                Denotes that the player was disconnected normally.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Events.PlayerDisconnectCause.WebSocketClosed">
            <summary>
                Denotes that the player was disconnected because the lavalink socket was closed.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.PlayerDisconnectedEventArgs">
            <summary>
                Event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.PlayerDisconnected"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.PlayerDisconnectedEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer,System.UInt64,Lavalink4NET.Events.PlayerDisconnectCause)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.PlayerDisconnectedEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <param name="voiceChannelId">
                the snowflake identifier of the voice channel disconnected from
            </param>
            <param name="disconnectCause">the reason why the player disconnected</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.PlayerDisconnectedEventArgs.DisconnectCause">
            <summary>
                Gets the reason why the player disconnected.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.PlayerDisconnectedEventArgs.VoiceChannelId">
            <summary>
                Gets the snowflake identifier of the voice channel disconnected from.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.PlayerEventArgs">
            <summary>
                Abstraction for event arguments where a player is affected.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.PlayerEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.PlayerEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.PlayerEventArgs.Player">
            <summary>
                Gets the affected player.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.PlayerMovedEventArgs">
            <summary>
                The <see cref="T:System.EventArgs"/> for the <see cref="E:Lavalink4NET.Cluster.LavalinkCluster.PlayerMoved"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.PlayerMovedEventArgs.#ctor(Lavalink4NET.LavalinkNode,Lavalink4NET.LavalinkNode,Lavalink4NET.Player.LavalinkPlayer)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.PlayerMovedEventArgs"/> class.
            </summary>
            <param name="node">the node the player was dropped from</param>
            <param name="targetNode">
                the node the player was moved to; if <see langword="null"/> the player was not moved
                to a new node, because no node was available
            </param>
            <param name="player">the player that was dropped</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.PlayerMovedEventArgs.CouldBeMoved">
            <summary>
                Gets a value indicating whether the player could be moved to another node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.PlayerMovedEventArgs.Node">
            <summary>
                Gets the node the player was dropped from.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.PlayerMovedEventArgs.Player">
            <summary>
                Gets the player that was dropped.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.PlayerMovedEventArgs.TargetNode">
            <summary>
                Gets the node the player was moved to; if <see langword="null"/> the player was not
                moved to a new node, because no node was available.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.ReconnectAttemptEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.ReconnectAttemptEventArgs.#ctor(System.Uri,System.Int32,Lavalink4NET.ReconnectStrategy)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.ReconnectAttemptEventArgs"/> class.
            </summary>
            <param name="uri">the URI connect / reconnected / disconnected from / to</param>
            <param name="attempt">the number of reconnect attempts already made (1 = first)</param>
            <param name="strategy">the reconnect strategy used</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="uri"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="strategy"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.ReconnectAttemptEventArgs.CancelReconnect">
            <summary>
                Gets or sets a value indicating whether the reconnect attempt should be canceled.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.ReconnectAttemptEventArgs.Attempt">
            <summary>
                Gets the number of reconnect attempts already made (1 = first).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.ReconnectAttemptEventArgs.Strategy">
            <summary>
                Gets the reconnect strategy used.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.TrackEndEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.TrackEnd"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.TrackEndEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer,System.String,Lavalink4NET.Player.TrackEndReason)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.TrackEndEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <param name="trackIdentifier">the identifier of the affected track</param>
            <param name="reason">the reason why the track ended</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.TrackEndEventArgs.Reason">
            <summary>
                Gets the reason why the track ended.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.TrackEndEventArgs.MayStartNext">
            <summary>
                Gets a value indicating whether the player should play the next track.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.TrackEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.TrackEnd"/>.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.TrackEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.TrackEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <param name="trackIdentifier">the identifier of the affected track</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.TrackEventArgs.TrackIdentifier">
            <summary>
                Gets the identifier of the affected track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.TrackEventArgs.Player">
            <summary>
                Gets the affected player.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.TrackExceptionEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.TrackException"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.TrackExceptionEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.TrackExceptionEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <param name="trackIdentifier">the identifier of the affected track</param>
            <param name="error">the error that occurred</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="error"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.TrackExceptionEventArgs.Error">
            <summary>
                Gets the error that occurred.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.TrackStuckEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.TrackStuck"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.TrackStuckEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer,System.String,System.Int64)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.TrackStuckEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <param name="trackIdentifier">the identifier of the affected track</param>
            <param name="threshold">the threshold in milliseconds</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.TrackStuckEventArgs.Threshold">
            <summary>
                Gets the threshold in milliseconds.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.VoiceStateUpdateEventArgs">
            <summary>
                Represents the event arguments for the
                <see cref="E:Lavalink4NET.IDiscordClientWrapper.VoiceStateUpdated"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.VoiceStateUpdateEventArgs.#ctor(System.UInt64,Lavalink4NET.VoiceState,Lavalink4NET.VoiceState)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.VoiceStateUpdateEventArgs"/> class.
            </summary>
            <param name="userId">the user snowflake identifier the update is for</param>
            <param name="voiceState">the new user voice state</param>
            <param name="oldVoiceState">the old user voice state</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="voiceState"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="oldVoiceState"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.VoiceStateUpdateEventArgs.UserId">
            <summary>
                Gets the user snowflake identifier the update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.VoiceStateUpdateEventArgs.VoiceState">
            <summary>
                Gets the new user voice state.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.VoiceStateUpdateEventArgs.OldVoiceState">
            <summary>
                Gets the old user voice state.
            </summary>
        </member>
        <member name="T:Lavalink4NET.IAudioService">
            <summary>
                The interface for a lavalink audio provider service.
            </summary>
        </member>
        <member name="M:Lavalink4NET.IAudioService.GetPlayer``1(System.UInt64)">
            <summary>
                Gets the audio player for the specified <paramref name="guildId"/>.
            </summary>
            <typeparam name="TPlayer">the type of the player to use</typeparam>
            <param name="guildId">the guild identifier to get the player for</param>
            <returns>the player for the guild</returns>
        </member>
        <member name="M:Lavalink4NET.IAudioService.GetPlayer(System.UInt64)">
            <summary>
                Gets the audio player for the specified <paramref name="guildId"/>.
            </summary>
            <param name="guildId">the guild identifier to get the player for</param>
            <returns>the player for the guild</returns>
        </member>
        <member name="M:Lavalink4NET.IAudioService.GetPlayers``1">
            <summary>
                Gets all players of the specified <typeparamref name="TPlayer"/>.
            </summary>
            <typeparam name="TPlayer">
                the type of the players to get; use <see cref="T:Lavalink4NET.Player.LavalinkPlayer"/> to get all players
            </typeparam>
            <returns>the player list</returns>
        </member>
        <member name="M:Lavalink4NET.IAudioService.HasPlayer(System.UInt64)">
            <summary>
                Gets a value indicating whether a player is created for the specified <paramref name="guildId"/>.
            </summary>
            <param name="guildId">
                the snowflake identifier of the guild to create the player for
            </param>
            <returns>a value indicating whether a player is created for the specified <paramref name="guildId"/></returns>
        </member>
        <member name="M:Lavalink4NET.IAudioService.InitializeAsync">
            <summary>
                Initializes the audio service asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.IAudioService.JoinAsync``1(System.UInt64,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <typeparam name="TPlayer">the type of the player to create</typeparam>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the audio player</para>
            </returns>
        </member>
        <member name="M:Lavalink4NET.IAudioService.JoinAsync(System.UInt64,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the audio player</para>
            </returns>
        </member>
        <member name="T:Lavalink4NET.IDiscordClientWrapper">
            <summary>
                The interface for implementing a discord client wrapper for usage with the lavalink audio service.
            </summary>
        </member>
        <member name="M:Lavalink4NET.IDiscordClientWrapper.InitializeAsync">
            <summary>
                Awaits the initialization of the discord client asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="P:Lavalink4NET.IDiscordClientWrapper.CurrentUserId">
            <summary>
                Gets the current user snowflake identifier value.
            </summary>
        </member>
        <member name="P:Lavalink4NET.IDiscordClientWrapper.ShardCount">
            <summary>
                Gets the number of total shards the bot uses.
            </summary>
        </member>
        <member name="M:Lavalink4NET.IDiscordClientWrapper.SendVoiceUpdateAsync(System.UInt64,System.Nullable{System.UInt64},System.Boolean,System.Boolean)">
            <summary>
                Sends a voice channel state update asynchronously.
            </summary>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">
                the snowflake identifier of the voice channel to join (if <see langword="null"/> the
                client should disconnect from the voice channel).
            </param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.IDiscordClientWrapper.GetChannelUsersAsync(System.UInt64,System.UInt64)">
            <summary>
                Gets the snowflake identifier values of the users in the voice channel specified by
                <paramref name="voiceChannelId"/> (the snowflake identifier of the voice channel).
            </summary>
            <param name="guildId">the guild identifier snowflake where the channel is in</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the snowflake identifier values of the users in the voice channel</para>
            </returns>
        </member>
        <member name="E:Lavalink4NET.IDiscordClientWrapper.VoiceStateUpdated">
            <summary>
                An asynchronous event which is triggered when a user voice state was updated.
            </summary>
        </member>
        <member name="E:Lavalink4NET.IDiscordClientWrapper.VoiceServerUpdated">
            <summary>
                An asynchronous event which is triggered when the voice server was updated.
            </summary>
        </member>
        <member name="T:Lavalink4NET.ILavalinkCache">
            <summary>
                An interface for an optional cache for making requests.
            </summary>
        </member>
        <member name="M:Lavalink4NET.ILavalinkCache.AddItem(System.String,System.Object,System.DateTimeOffset)">
            <summary>
                Adds an item to the cache.
            </summary>
            <param name="key">the item cache scope / the location of the item</param>
            <param name="item">the item to cache</param>
            <param name="absoluteExpiration">
                the Coordinated Universal Time (UTC) time point offset when the cache item will
                expire and is marked to be removed from the cache.
            </param>
        </member>
        <member name="M:Lavalink4NET.ILavalinkCache.TryGetItem``1(System.String,``0@)">
            <summary>
                Tries to retrieve an item from the cache.
            </summary>
            <typeparam name="T">the type of the cached object</typeparam>
            <param name="key">the item cache scope / the location of the item</param>
            <param name="item">
                the item that was found in cache; or default if the item was not in cache
            </param>
            <returns>a value indicating whether the item was in cache</returns>
        </member>
        <member name="T:Lavalink4NET.Lavalink">
            <summary>
                The main lavalink class.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Lavalink.SupportedVersion">
            <summary>
                Gets the current lavalink server version that is supported by the library.
            </summary>
        </member>
        <member name="T:Lavalink4NET.LavalinkNode">
            <summary>
                Used for connecting to a single lavalink node.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.#ctor(Lavalink4NET.LavalinkNodeOptions,Lavalink4NET.IDiscordClientWrapper,Lavalink4NET.Logging.ILogger,Lavalink4NET.ILavalinkCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.LavalinkNode"/> class.
            </summary>
            <param name="options">the node options for connecting</param>
            <param name="client">the discord client</param>
            <param name="logger">the logger</param>
            <param name="cache">an optional cache that caches track requests</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="options"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="client"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="E:Lavalink4NET.LavalinkNode.PlayerConnected">
            <summary>
                Asynchronous event which is dispatched when a player connected to a voice channel.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkNode.PlayerDisconnected">
            <summary>
                Asynchronous event which is dispatched when a player disconnected from a voice channel.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkNode.StatisticsUpdated">
            <summary>
                An asynchronous event which is triggered when a new statistics update was received
                from the lavalink node.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkNode.TrackEnd">
            <summary>
                An asynchronous event which is triggered when a track ended.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkNode.TrackException">
            <summary>
                An asynchronous event which is triggered when an exception occurred while playing a track.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkNode.TrackStuck">
            <summary>
                An asynchronous event which is triggered when a track got stuck.
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkNode.Statistics">
            <summary>
                Gets the last received node statistics; or <see langword="null"/> if no statistics
                are available for the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkNode.Players">
            <summary>
                Gets the player dictionary.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.Dispose">
            <summary>
                Disposes the node.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.GetPlayer``1(System.UInt64)">
            <summary>
                Gets the audio player for the specified <paramref name="guildId"/>.
            </summary>
            <typeparam name="TPlayer">the type of the player to use</typeparam>
            <param name="guildId">the guild identifier to get the player for</param>
            <returns>the player for the guild</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown when a player was already created for the guild specified by <paramref
                name="guildId"/>, but the requested player type ( <typeparamref name="TPlayer"/>)
                differs from the created one.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the node socket has not been initialized. (Call <see
                cref="M:Lavalink4NET.LavalinkSocket.InitializeAsync"/> before sending payloads)
            </exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.GetPlayer(System.UInt64)">
            <summary>
                Gets the audio player for the specified <paramref name="guildId"/>.
            </summary>
            <param name="guildId">the guild identifier to get the player for</param>
            <returns>the player for the guild</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.GetPlayers``1">
            <summary>
                Gets all players of the specified <typeparamref name="TPlayer"/>.
            </summary>
            <typeparam name="TPlayer">
                the type of the players to get; use <see cref="T:Lavalink4NET.Player.LavalinkPlayer"/> to get all players
            </typeparam>
            <returns>the player list</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.HasPlayer(System.UInt64)">
            <summary>
                Gets a value indicating whether a player is created for the specified <paramref name="guildId"/>.
            </summary>
            <param name="guildId">
                the snowflake identifier of the guild to create the player for
            </param>
            <returns>
                a value indicating whether a player is created for the specified <paramref name="guildId"/>
            </returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.JoinAsync``1(System.UInt64,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <remarks>This will auto-initialize the connection to the node asynchronously.</remarks>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the audio player</para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
                thrown when a player was already created for the guild specified by <paramref
                name="guildId"/>, but the requested player type ( <typeparamref name="TPlayer"/>)
                differs from the created one.
            </exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.JoinAsync(System.UInt64,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the audio player</para>
            </returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.MoveAllPlayersAsync(Lavalink4NET.LavalinkNode)">
            <summary>
                Mass moves all players of the current node to the specified <paramref name="node"/> asynchronously.
            </summary>
            <param name="node">the node to move the players to</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="node"/> is the same as the player node.
            </exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.MovePlayerAsync(Lavalink4NET.Player.LavalinkPlayer,Lavalink4NET.LavalinkNode)">
            <summary>
                Moves the specified <paramref name="player"/> to the specified <paramref
                name="node"/> asynchronously (while keeping its data and the same instance of the player).
            </summary>
            <param name="player">the player to move</param>
            <param name="node">the node to move the player to</param>
            <returns>a task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="node"/> is the same as the player node.
            </exception>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="player"/> is already served by the specified
                <paramref name="node"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="node"/> does not serve the specified
                <paramref name="player"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.NotifyDisconnectAsync(Lavalink4NET.Events.PlayerDisconnectedEventArgs)">
            <summary>
                Notifies a player disconnect asynchronously.
            </summary>
            <param name="eventArgs">the event arguments passed with the event</param>
            <returns>a task that represents the asynchronously operation.</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnEventReceived(Lavalink4NET.Payloads.EventPayload)">
            <summary>
                Handles an event payload asynchronously.
            </summary>
            <param name="payload">the payload</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnPayloadReceived(Lavalink4NET.Events.PayloadReceivedEventArgs)">
            <summary>
                Processes the payload and invokes the <see cref="E:Lavalink4NET.LavalinkSocket.PayloadReceived"/>
                event asynchronously. (Can be override for event catching)
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnPlayerConnectedAsync(Lavalink4NET.Events.PlayerConnectedEventArgs)">
            <summary>
                Dispatches the <see cref="E:Lavalink4NET.LavalinkNode.PlayerConnected"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments passed with the event</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnPlayerDisconnectedAsync(Lavalink4NET.Events.PlayerDisconnectedEventArgs)">
            <summary>
                Dispatches the <see cref="E:Lavalink4NET.LavalinkNode.PlayerDisconnected"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments passed with the event</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnPlayerPayloadReceived(Lavalink4NET.Payloads.IPlayerPayload)">
            <summary>
                Handles a player payload asynchronously.
            </summary>
            <param name="payload">the payload</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnStatisticsUpdateAsync(Lavalink4NET.Events.NodeStatisticsUpdateEventArgs)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkNode.StatisticsUpdated"/> event asynchronously. (Can be override
                for event catching)
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnTrackEndAsync(Lavalink4NET.Events.TrackEndEventArgs)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkNode.TrackEnd"/> event asynchronously. (Can be override for event catching)
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnTrackExceptionAsync(Lavalink4NET.Events.TrackExceptionEventArgs)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkNode.TrackException"/> event asynchronously. (Can be override for
                event catching)
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnTrackStuckAsync(Lavalink4NET.Events.TrackStuckEventArgs)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkNode.TrackStuck"/> event asynchronously. (Can be override for
                event catching)
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.VoiceServerUpdated(System.Object,Lavalink4NET.VoiceServer)">
            <summary>
                The asynchronous method which is triggered when a voice server updated was received
                from the discord gateway.
            </summary>
            <param name="sender">the event sender (unused here, but may be override)</param>
            <param name="voiceServer">the voice server update data</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.VoiceStateUpdated(System.Object,Lavalink4NET.Events.VoiceStateUpdateEventArgs)">
            <summary>
                The asynchronous method which is triggered when a voice state updated was received
                from the discord gateway.
            </summary>
            <param name="sender">the event sender (unused here)</param>
            <param name="args">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.LavalinkNodeOptions">
            <summary>
                The required options used to connect to a lavalink node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkNodeOptions.AllowResuming">
            <summary>
                Gets or sets a value indicating whether session resuming should be used when the
                connection to the node is aborted.
            </summary>
            <remarks>This property defaults to <see langword="true"/>.</remarks>
        </member>
        <member name="P:Lavalink4NET.LavalinkNodeOptions.BufferSize">
            <summary>
                Gets or sets the buffer size when receiving payloads from a lavalink node.
            </summary>
            <remarks>This property defaults to <c>1024</c> (1 KiB)</remarks>
        </member>
        <member name="P:Lavalink4NET.LavalinkNodeOptions.DisconnectOnStop">
            <summary>
                Gets or sets a value indicating whether the player should disconnect from the voice
                channel its connected to after the track ended.
            </summary>
            <remarks>
                This property defaults to <see langword="true"/>. This can be useful to set to
                <see langword="false"/>, for example when using the InactivityTrackingService.
            </remarks>
        </member>
        <member name="P:Lavalink4NET.LavalinkNodeOptions.ReconnectStrategy">
            <summary>
                Gets or sets the reconnect strategy for reconnection.
            </summary>
            <remarks>This property defaults to <see cref="P:Lavalink4NET.ReconnectStrategies.DefaultStrategy"/>.</remarks>
        </member>
        <member name="P:Lavalink4NET.LavalinkNodeOptions.WebSocketUri">
            <summary>
                Gets or sets the Lavalink Node WebSocket host(name).
            </summary>
            <remarks>This property defaults to <c>ws://localhost:8080/</c>.</remarks>
        </member>
        <member name="T:Lavalink4NET.LavalinkSocket">
            <summary>
                The socket for connecting to a lavalink node.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.#ctor(Lavalink4NET.LavalinkNodeOptions,Lavalink4NET.IDiscordClientWrapper,Lavalink4NET.Logging.ILogger,Lavalink4NET.ILavalinkCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.LavalinkSocket"/> class.
            </summary>
            <param name="options">the node options</param>
            <param name="client">the discord client</param>
            <param name="logger">the logger</param>
            <param name="cache">an optional cache that caches track requests</param>
        </member>
        <member name="E:Lavalink4NET.LavalinkSocket.Connected">
            <summary>
                Asynchronously triggered when the socket connected to a remote endpoint.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkSocket.Disconnected">
            <summary>
                Asynchronously triggered when the socket disconnected from the remote endpoint.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkSocket.PayloadReceived">
            <summary>
                An asynchronous event which is triggered when a payload was received from the
                lavalink node.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkSocket.ReconnectAttempt">
            <summary>
                An asynchronous event which is triggered when a new reconnection attempt is made.
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkSocket.IsConnected">
            <summary>
                Gets a value indicating whether the client is connected to the lavalink node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkSocket.Logger">
            <summary>
                Gets the logger.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
                Closes the connection to the remote endpoint asynchronously.
            </summary>
            <param name="closeStatus">the close status</param>
            <param name="reason">the close reason</param>
            <param name="cancellationToken">
                a cancellation token used to propagate notification that this operation should be canceled.
            </param>
            <returns>a task that represents the asynchronously operation.</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
                Connects to the lavalink node asynchronously.
            </summary>
            <param name="cancellationToken">
                a cancellation token used to propagate notification that the operation should be canceled.
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the connection is already open
            </exception>
            <exception cref="T:System.OperationCanceledException">thrown if the operation was canceled</exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.Dispose">
            <summary>
                Disposes the inner web socket.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.InitializeAsync">
            <summary>
                Initializes the node asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.SendPayloadAsync(Lavalink4NET.Payloads.IPayload,System.Boolean)">
            <summary>
                Sends a payload to the lavalink node asynchronously.
            </summary>
            <param name="payload">the payload to sent</param>
            <param name="forceSend">
                a value indicating whether an exception should be thrown if the connection is closed.
                If <see langword="true"/>, an exception is thrown; Otherwise payloads will be stored
                into a send queue and will be replayed (FIFO) after successful reconnection.
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the connection to the node is closed (see: <see cref="P:Lavalink4NET.LavalinkSocket.IsConnected"/>) and
                <paramref name="forceSend"/> is <see langword="true"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the node socket has not been initialized. (Call
                <see cref="M:Lavalink4NET.LavalinkSocket.InitializeAsync"/> before sending payloads)
            </exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.NotifyDisconnectAsync(Lavalink4NET.Events.PlayerDisconnectedEventArgs)">
            <summary>
                Notifies a player disconnect asynchronously.
            </summary>
            <param name="eventArgs">the event arguments passed with the event</param>
            <returns>a task that represents the asynchronously operation.</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.EnsureInitialized">
            <summary>
                Ensures that the socket is initialized.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                thrown if the node socket has not been initialized. (Call
                <see cref="M:Lavalink4NET.LavalinkSocket.InitializeAsync"/> before sending payloads)
            </exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.OnConnectedAsync(Lavalink4NET.Events.ConnectedEventArgs)">
            <summary>
                Triggers the <see cref="E:Lavalink4NET.LavalinkSocket.Connected"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronously operation.</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.OnDisconnectedAsync(Lavalink4NET.Events.DisconnectedEventArgs)">
            <summary>
                Triggers the <see cref="E:Lavalink4NET.LavalinkSocket.Disconnected"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronously operation.</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.OnPayloadReceived(Lavalink4NET.Events.PayloadReceivedEventArgs)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkSocket.PayloadReceived"/> event asynchronously. (Can be override for
                event catching)
            </summary>
            <param name="eventArgs">the event arguments for the event</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.OnReconnectAttemptAsync(Lavalink4NET.Events.ReconnectAttemptEventArgs)">
            <summary>
                Triggers the <see cref="E:Lavalink4NET.LavalinkSocket.ReconnectAttempt"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronously operation.</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.ProcessNextPayload">
            <summary>
                Processes an incoming payload asynchronously.
            </summary>
            <remarks>
                This method should not be called manually. It is called in the connection life cycle,
                see: <see cref="M:Lavalink4NET.LavalinkSocket.RunLifeCycleAsync"/>.
            </remarks>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.RunLifeCycleAsync">
            <summary>
                Runs the receive / reconnect life cycle asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Logging.EventLogger">
            <summary>
                A logger implementation for a logger that logs the messages to an event.
            </summary>
        </member>
        <member name="E:Lavalink4NET.Logging.EventLogger.LogMessage">
            <summary>
                An event that is triggered when a message is logged.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Logging.EventLogger.Log(System.Object,System.String,Lavalink4NET.Logging.LogLevel,System.Exception)">
            <summary>
                Logs a message.
            </summary>
            <param name="source">the source the message comes from (usually this)</param>
            <param name="message">the message to log</param>
            <param name="level">the logging level / the severity of the message</param>
            <param name="exception">an optional exception that occurred</param>
        </member>
        <member name="M:Lavalink4NET.Logging.EventLogger.OnLogMessage(Lavalink4NET.Logging.LogMessageEventArgs)">
            <summary>
                Triggers the <see cref="E:Lavalink4NET.Logging.EventLogger.LogMessage"/> event.
            </summary>
            <param name="eventArgs">the event arguments</param>
        </member>
        <member name="T:Lavalink4NET.Logging.ILogger">
            <summary>
                An interface for a logger provider.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Logging.ILogger.Log(System.Object,System.String,Lavalink4NET.Logging.LogLevel,System.Exception)">
            <summary>
                Logs a message.
            </summary>
            <param name="source">the source the message comes from (usually this)</param>
            <param name="message">the message to log</param>
            <param name="level">the logging level / the severity of the message</param>
            <param name="exception">an optional exception that occurred</param>
        </member>
        <member name="T:Lavalink4NET.Logging.LogLevel">
            <summary>
                A set of different logging levels.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Logging.LogLevel.Information">
            <summary>
                Information, not critical, just for user information.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Logging.LogLevel.Error">
            <summary>
                Error, critical (application can continue)
            </summary>
        </member>
        <member name="F:Lavalink4NET.Logging.LogLevel.Warning">
            <summary>
                Warning, not critical (a warning, but the application can continue without any
                further problems)
            </summary>
        </member>
        <member name="F:Lavalink4NET.Logging.LogLevel.Debug">
            <summary>
                Debug message, not critical (just for information / debugging)
            </summary>
        </member>
        <member name="F:Lavalink4NET.Logging.LogLevel.Trace">
            <summary>
                Trace message, not critical (just for information / debugging)
            </summary>
        </member>
        <member name="T:Lavalink4NET.Logging.LogMessageEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.Logging.EventLogger.LogMessage"/> event.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Logging.LogMessageEventArgs.Source">
             <summary>
            Gets the source the message comes from.
             </summary>
        </member>
        <member name="P:Lavalink4NET.Logging.LogMessageEventArgs.Message">
            <summary>
                Gets the message to log.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Logging.LogMessageEventArgs.Level">
            <summary>
                Gets the logging level / the severity of the message.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Logging.LogMessageEventArgs.Exception">
            <summary>
                Gets an optional exception that occurred.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Logging.LogMessageEventArgs.#ctor(System.Object,System.String,Lavalink4NET.Logging.LogLevel,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Logging.LogMessageEventArgs"/> class.
            </summary>
            <param name="source">the source the message comes from</param>
            <param name="message">the message to log</param>
            <param name="level">the logging level / the severity of the message</param>
            <param name="exception">an optional exception that occurred</param>
        </member>
        <member name="T:Lavalink4NET.Lyrics.LyricsOptions">
            <summary>
                The service options for the <see cref="T:Lavalink4NET.Lyrics.LyricsService"/> class.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Lyrics.LyricsOptions.RestUri">
            <summary>
                Gets or sets the base endpoint of the Lyrics API service ("lyrics.ovh"). This
                property can be useful when using a local lyrics.ovh API service.
            </summary>
            <remarks>
                This property defaults to <c>"https://api.lyrics.ovh/v1/"</c>. Note this is an
                absolute URI and can not be <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Lavalink4NET.Lyrics.LyricsOptions.SuppressExceptions">
            <summary>
                Gets or sets a value indicating whether an exception should be thrown when a response
                to the lyrics.ovh API service failed (returned with a non-2xx / success HTTP status
                code). (For example the lyrics.ovh API service returns with a 404 Not Found, if the
                lyrics for a song were not found.)
            </summary>
            <remarks>This property defaults to <see langword="true"/>.</remarks>
        </member>
        <member name="T:Lavalink4NET.Lyrics.LyricsResponse">
            <summary>
                The response payload returned by the lyrics API service.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Lyrics.LyricsResponse.ErrorMessage">
            <summary>
                Gets an hopefully descriptive error message indicating what error occurred.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Lyrics.LyricsResponse.Lyrics">
            <summary>
                Gets the lyrics of the requested song.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Lyrics.LyricsService">
            <summary>
                A service for retrieving song lyrics from the "https://lyrics.ovh" api.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Lyrics.LyricsService.#ctor(Lavalink4NET.Lyrics.LyricsOptions,Lavalink4NET.ILavalinkCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Lyrics.LyricsService"/> class.
            </summary>
            <param name="options">the lyrics service options</param>
            <param name="cache">the request cache</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="options"/> parameter is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Lyrics.LyricsService.Dispose">
            <summary>
                Disposes the underlying HTTP client.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Lyrics.LyricsService.GetLyricsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Gets the lyrics for a track asynchronously (cached).
            </summary>
            <param name="artist">the artist name (e.g. Coldplay)</param>
            <param name="title">the title of the track (e.g. "Adventure of a Lifetime")</param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result is the track found
                for the query
            </returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="artist"/> is blank.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="title"/> is blank.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Lyrics.LyricsService.GetLyricsAsync(Lavalink4NET.Player.LavalinkTrackInfo,System.Threading.CancellationToken)">
            <summary>
                Gets the lyrics for a track asynchronously (cached).
            </summary>
            <param name="trackInfo">the track information to get the lyrics for</param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result is the lyrics
                found for the query
            </returns>
        </member>
        <member name="M:Lavalink4NET.Lyrics.LyricsService.RequestLyricsAsync(Lavalink4NET.Player.LavalinkTrackInfo,System.Threading.CancellationToken)">
            <summary>
                Gets the lyrics for a track asynchronously (no caching).
            </summary>
            <param name="trackInfo">the track information to get the lyrics for</param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result is the lyrics
                found for the query
            </returns>
        </member>
        <member name="M:Lavalink4NET.Lyrics.LyricsService.RequestLyricsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Gets the lyrics for a track asynchronously (no caching).
            </summary>
            <param name="artist">the artist name (e.g. Coldplay)</param>
            <param name="title">the title of the track (e.g. "Adventure of a Lifetime")</param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result is the lyrics
                found for the query
            </returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="artist"/> is blank.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="title"/> is blank.
            </exception>
        </member>
        <member name="T:Lavalink4NET.Payloads.EventPayload">
            <summary>
                An abstract implementation of lavalink incoming server event payloads.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.EventPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.EventPayload.Type">
            <summary>
                Gets the event type.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.EventPayload.GuildId">
            <summary>
                Gets the id of the affected guild.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Events.TrackEndEvent">
            <summary>
                The strongly-typed representation of a track end event received from the lavalink node
                (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.TrackEndEvent.Type">
            <summary>
                Gets the event type.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.TrackEndEvent.TrackIdentifier">
            <summary>
                Gets the identifier of the track that has ended.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.TrackEndEvent.Reason">
            <summary>
                Gets the reason why the track ended.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Events.TrackExceptionEvent">
            <summary>
                The strongly-typed representation of a track exception event received from the lavalink
                node (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.TrackExceptionEvent.Type">
            <summary>
                Gets the event type.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.TrackExceptionEvent.TrackIdentifier">
            <summary>
                Gets the identifier of the track where the exception occurred.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.TrackExceptionEvent.Error">
            <summary>
                Gets the error that occurred.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Events.TrackStuckEvent">
            <summary>
                The strongly-typed representation of a track stuck event received from the lavalink node
                (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.TrackStuckEvent.Type">
            <summary>
                Gets the event type.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.TrackStuckEvent.TrackIdentifier">
            <summary>
                Gets the identifier of the track that got stuck.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.TrackStuckEvent.Threshold">
            <summary>
                Gets the threshold in milliseconds.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Events.VoiceServerUpdateEvent">
            <summary>
                The update data for the voice server update that is sent to the lavalink server when it
                was received from the discord gateway.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Events.VoiceServerUpdateEvent.#ctor(System.String,System.UInt64,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Events.VoiceServerUpdateEvent"/> class.
            </summary>
            <param name="token">the token for the voice connection</param>
            <param name="guildId">the id of the guild the update is for</param>
            <param name="endpoint">the endpoint of the voice server</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="token"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="endpoint"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="M:Lavalink4NET.Payloads.Events.VoiceServerUpdateEvent.#ctor(Lavalink4NET.VoiceServer)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Events.VoiceServerUpdateEvent"/> class.
            </summary>
            <param name="voiceServer">the voice server</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.VoiceServerUpdateEvent.Token">
            <summary>
                Gets the token for the voice connection.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.VoiceServerUpdateEvent.GuildId">
            <summary>
                Gets the id of the guild the update is for
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.VoiceServerUpdateEvent.Endpoint">
            <summary>
                Gets the endpoint of the voice server.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Events.WebSocketClosedEvent">
            <summary>
                The strongly-typed representation of a web socket closed event received from the lavalink
                node (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.WebSocketClosedEvent.Type">
            <summary>
                Gets the event type.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.WebSocketClosedEvent.CloseCode">
            <summary>
                Gets the web-socket close code.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.WebSocketClosedEvent.Reason">
            <summary>
                Gets the reason why the web-socket was closed.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Events.WebSocketClosedEvent.ByRemote">
            <summary>
                Gets a value indicating whether the connection was closed by the remote (discord gateway).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.EventType">
            <summary>
                The event types in lavalink event payloads.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.EventType.TrackEnd">
            <summary>
                Indicates that a playing track ended.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.EventType.TrackException">
            <summary>
                Indicates that an exception occurred while playing a track.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.EventType.TrackStuck">
            <summary>
                Indicates that a track got stuck while playing.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.EventType.WebSocketClosedEvent">
            <summary>
                Indicates that the discord voice socket was closed.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.IPayload">
            <summary>
                The base of a lavalink payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.IPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.IPlayerPayload">
            <summary>
                The base for lavalink player payloads.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.IPlayerPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the payload is for.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Node.ConfigureResumingPayload">
            <summary>
                The strongly-typed representation of a configure resuming payload which sent to the
                lavalink node (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Node.ConfigureResumingPayload.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Node.ConfigureResumingPayload"/> class.
            </summary>
            <param name="key">the resuming key</param>
            <param name="timeout">
                the number of seconds after disconnecting before the session is closed anyways
            </param>
        </member>
        <member name="M:Lavalink4NET.Payloads.Node.ConfigureResumingPayload.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Node.ConfigureResumingPayload"/> class.
            </summary>
            <param name="timeout">
                the number of seconds after disconnecting before the session is closed anyways
            </param>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.ConfigureResumingPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.ConfigureResumingPayload.Key">
            <summary>
                Gets the resuming key.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.ConfigureResumingPayload.Timeout">
            <summary>
                Gets the number of seconds after disconnecting before the session is closed anyways.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Node.StatsUpdatePayload">
            <summary>
                The strongly-typed representation of a node statistics payload received from the lavalink
                node (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.StatsUpdatePayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.StatsUpdatePayload.Players">
            <summary>
                Gets the number of players the node is holding.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.StatsUpdatePayload.PlayingPlayers">
            <summary>
                Gets the number of players that are currently playing using the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.StatsUpdatePayload.Uptime">
            <summary>
                Gets the uptime from the node (how long the node is online).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.StatsUpdatePayload.Memory">
            <summary>
                Gets usage statistics for the memory of the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.StatsUpdatePayload.Processor">
            <summary>
                Gets usage statistics for the processor of the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.StatsUpdatePayload.FrameStatistics">
            <summary>
                Gets frame statistics of the node.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Node.VoiceUpdatePayload">
            <summary>
                The representation of a voice update lavalink payload.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Node.VoiceUpdatePayload.#ctor(System.UInt64,System.String,Lavalink4NET.Payloads.Events.VoiceServerUpdateEvent)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Node.VoiceUpdatePayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
            <param name="sessionId">
                the discord voice state session identifier received from the voice state update payload
            </param>
            <param name="voiceServerUpdateEvent">the voice server update event</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="sessionId"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="voiceServerUpdateEvent"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.VoiceUpdatePayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.VoiceUpdatePayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the voice update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.VoiceUpdatePayload.SessionId">
            <summary>
                Gets the discord voice state session identifier received from the voice state update payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Node.VoiceUpdatePayload.VoiceServerUpdateEvent">
            <summary>
                Gets the voice server update event.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.OpCode">
            <summary>
                The supported lavalink operation codes for payloads.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.GuildVoiceUpdate">
            <summary>
                Provide an intercepted voice server update. This causes the server to connect to the
                voice channel.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerPlay">
            <summary>
                Cause the player to play a track.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerStop">
            <summary>
                Cause the player to stop.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerPause">
            <summary>
                Set player pause.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerSeek">
            <summary>
                Make the player seek to a position of the track.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerVolume">
            <summary>
                Set player volume.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerEqualizer">
            <summary>
                Using the player equalizer.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerDestroy">
            <summary>
                Tell the server to potentially disconnect from the voice server and potentially
                remove the player with all its data. This is useful if you want to move to a new node
                for a voice connection. Calling this op does not affect voice state, and you can send
                the same VOICE_SERVER_UPDATE to a new node.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.ConfigureResuming">
            <summary>
                Configures resuming for the connection.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerUpdate">
            <summary>
                Position information about a player.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.NodeStats">
            <summary>
                A collection of stats sent every minute.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.Event">
            <summary>
                An event was emitted.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.PayloadConverter">
            <summary>
                An utility class for converting lavalink payloads.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.PayloadConverter.GetEventType(Lavalink4NET.Payloads.EventType)">
            <summary>
                Gets the implementation type for the specified <paramref name="eventType"/>.
            </summary>
            <param name="eventType">the type of the event</param>
            <returns>the implementation type</returns>
        </member>
        <member name="M:Lavalink4NET.Payloads.PayloadConverter.GetPayloadType(Lavalink4NET.Payloads.OpCode)">
            <summary>
                Gets the implementation type for the specified <paramref name="opCode"/>.
            </summary>
            <param name="opCode">the operation code of the event</param>
            <returns>the implementation type</returns>
        </member>
        <member name="M:Lavalink4NET.Payloads.PayloadConverter.ReadPayload(System.String)">
            <summary>
                Reads a lavalink payload from the specified json.
            </summary>
            <param name="json">the json to deserialize to a payload</param>
            <returns>the deserialized payload</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="json"/> is blank.
            </exception>
        </member>
        <member name="T:Lavalink4NET.Payloads.Player.PlayerDestroyPayload">
            <summary>
                The strongly-typed representation of a player destroy payload sent to the lavalink node
                (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Player.PlayerDestroyPayload.#ctor(System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Player.PlayerDestroyPayload"/> class.
            </summary>
            <param name="guildId">
                the guild snowflake identifier where the player should be destroyed
            </param>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerDestroyPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerDestroyPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier where the player should be destroyed.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Player.PlayerEqualizerPayload">
            <summary>
                The strongly-typed representation of a player equalizer update payload sent to the
                lavalink node (in serialized JSON format). For more reference see the lavalink client
                implementation documentation https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Player.PlayerEqualizerPayload.#ctor(System.UInt64,Lavalink4NET.Player.EqualizerBand[])">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Player.PlayerEqualizerPayload"/> class.
            </summary>
            <param name="guildId">
                the guild snowflake identifier the player equalizer update is for
            </param>
            <param name="bands">the equalizer bands</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerEqualizerPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerEqualizerPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player equalizer update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerEqualizerPayload.Bands">
            <summary>
                Gets the equalizer bands.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Player.PlayerPausePayload">
            <summary>
                The strongly-typed representation of a player pause payload sent to the lavalink node (in
                serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Player.PlayerPausePayload.#ctor(System.UInt64,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Player.PlayerPausePayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
            <param name="pause">a value indicating whether the player should be paused</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerPausePayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerPausePayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerPausePayload.Pause">
            <summary>
                Gets a value indicating whether the player should be paused.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Player.PlayerPlayPayload">
            <summary>
                The strongly-typed representation of a player play payload sent to the lavalink node (in
                serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Player.PlayerPlayPayload.#ctor(System.UInt64,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Player.PlayerPlayPayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
            <param name="trackIdentifier">the track identifier that the player should play</param>
            <param name="startTime">the track start position</param>
            <param name="endTime">the track end position</param>
            <param name="noReplace">
                a value indicating whether the track play should be ignored if the same track is
                currently playing
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerPlayPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerPlayPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerPlayPayload.TrackIdentifier">
            <summary>
                Gets the track identifier that the player should play.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerPlayPayload.StartTime">
            <summary>
                Gets the track start position in milliseconds.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerPlayPayload.EndTime">
            <summary>
                Gets the track end position in milliseconds.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerPlayPayload.NoReplace">
            <summary>
                Gets a value indicating whether the track play should be ignored if the same track is
                currently playing.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Player.PlayerSeekPayload">
            <summary>
                The strongly-typed representation of a player seek payload sent to the lavalink node (in
                serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Player.PlayerSeekPayload.#ctor(System.UInt64,System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Player.PlayerSeekPayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
            <param name="position">the seek position</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerSeekPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerSeekPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerSeekPayload.Position">
            <summary>
                Gets a value indicating whether the player should be paused.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Player.PlayerStatus">
            <summary>
                A wrapper for the player status object.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Player.PlayerStatus.#ctor(System.Int64,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Player.PlayerStatus"/> class.
            </summary>
            <param name="time">the time when the update was sent</param>
            <param name="position">the track position in milliseconds</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerStatus.UpdateTime">
            <summary>
                Gets the time when the position update was sent.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerStatus.Position">
            <summary>
                Gets the track position (at the time the update was received, see: <see cref="P:Lavalink4NET.Payloads.Player.PlayerStatus.UpdateTime"/>).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Player.PlayerStopPayload">
            <summary>
                The strongly-typed representation of a player stop payload sent to the lavalink node (in
                serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Player.PlayerStopPayload.#ctor(System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Player.PlayerStopPayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerStopPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerStopPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Player.PlayerUpdatePayload">
            <summary>
                The strongly-typed representation of a player update payload received from the lavalink
                node (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerUpdatePayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerUpdatePayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerUpdatePayload.Status">
            <summary>
                Gets the player status.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.Player.PlayerVolumePayload">
            <summary>
                The strongly-typed representation of a player volume payload sent to the lavalink node
                (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.Player.PlayerVolumePayload.#ctor(System.UInt64,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.Player.PlayerVolumePayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
            <param name="volume">the player volume (0 - 1000)</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerVolumePayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerVolumePayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.Player.PlayerVolumePayload.Volume">
            <summary>
                Gets a value indicating whether the player should be paused.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.EqualizerBand">
            <summary>
                Represents a lavalink equalizer band.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.EqualizerBand.#ctor(System.Int32,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.EqualizerBand"/> class.
            </summary>
            <param name="band">the equalizer band number (0-14)</param>
            <param name="gain">the band gain ( <c>-0.25f</c> - <c>1f</c>)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="band"/> is less than <c>1f</c> or greater
                than <c>14</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="gain"/> is less than <c>-0.25f</c> or greater
                than <c>1f</c>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Player.EqualizerBand.Band">
            <summary>
                Gets the equalizer band number (0-14).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.EqualizerBand.Gain">
            <summary>
                Gets the band gain (-0.25f - 1f).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.EqualizerBandComparer.Instance">
            <summary>
                Gets the shared instance of the <see cref="T:Lavalink4NET.Player.EqualizerBandComparer"/> class.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.EqualizerBandComparer.Equals(Lavalink4NET.Player.EqualizerBand,Lavalink4NET.Player.EqualizerBand)">
            <summary>
                Checks the equality of the first <paramref name="band1"/> and the second
                <paramref name="band2"/> by comparing it's gain value.
            </summary>
            <param name="band1">the first equalizer band</param>
            <param name="band2">the second equalizer band</param>
            <returns>a value indicating whether the first band is equal to the second</returns>
        </member>
        <member name="M:Lavalink4NET.Player.EqualizerBandComparer.GetHashCode(Lavalink4NET.Player.EqualizerBand)">
            <summary>
                Gets the hash-code of the specified <paramref name="band"/> without the gain included.
            </summary>
            <param name="band">the equalizer band</param>
            <returns>the hash code</returns>
        </member>
        <member name="T:Lavalink4NET.Player.LavalinkPlayer">
            <summary>
                Controls a remote Lavalink Audio Player.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.#ctor(Lavalink4NET.LavalinkSocket,Lavalink4NET.IDiscordClientWrapper,System.UInt64,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.LavalinkPlayer"/> class.
            </summary>
            <param name="lavalinkSocket">the lavalink socket</param>
            <param name="client">the discord client</param>
            <param name="guildId">the identifier of the guild that is controlled by the player</param>
            <param name="disconnectOnStop">
                a value indicating whether the player should stop after the track finished playing
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="lavalinkSocket"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="client"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.DefaultEqualizer">
            <summary>
                Gets the default equalizer bands. (All 15 [0-14] equalizer bands set to zero gain)
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.Client">
            <summary>
                Gets the discord client wrapper.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.CurrentTrack">
            <summary>
                Gets the track that is currently playing.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.GuildId">
            <summary>
                Gets the identifier snowflake value of the guild the player is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.State">
            <summary>
                Gets the current player state.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.TrackPosition">
            <summary>
                Gets the current track position.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.VoiceChannelId">
            <summary>
                Gets the voice channel id the player is connected to.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.Volume">
            <summary>
                Gets the current player volume.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.DisconnectCause">
            <summary>
                Gets or sets the reason why the player disconnected.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.LavalinkSocket">
            <summary>
                Gets the communication lavalink socket.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.ConnectAsync(System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the voice channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <param name="voiceChannelId">the voice channel identifier to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.DestroyAsync">
            <summary>
                Destroys the player asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.DisconnectAsync">
            <summary>
                Disconnects the player asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.Dispose">
            <summary>
                Disposes the player.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.OnConnectedAsync(Lavalink4NET.VoiceServer,Lavalink4NET.VoiceState)">
            <summary>
                Asynchronously triggered when the player has connected to a voice channel.
            </summary>
            <param name="voiceServer">the voice server connected to</param>
            <param name="voiceState">the voice state</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.OnTrackEndAsync(Lavalink4NET.Events.TrackEndEventArgs)">
            <summary>
                Asynchronously triggered when a track ends.
            </summary>
            <remarks>
                When overriding this method without supering / base calling it, the disconnect on
                stop function will be prevent.
            </remarks>
            <param name="eventArgs">the track event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.OnTrackExceptionAsync(Lavalink4NET.Events.TrackExceptionEventArgs)">
            <summary>
                Asynchronously triggered when an exception occurred while playing a track.
            </summary>
            <param name="eventArgs">the track event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.OnTrackStuckAsync(Lavalink4NET.Events.TrackStuckEventArgs)">
            <summary>
                Asynchronously triggered when a track got stuck.
            </summary>
            <param name="eventArgs">the track event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.PauseAsync">
            <summary>
                Pauses the current playing track asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the current playing track is already paused.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.PlayAsync(Lavalink4NET.Player.LavalinkTrack,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
                Plays the specified <paramref name="track"/> asynchronously.
            </summary>
            <param name="track">the track to play</param>
            <param name="startTime">the track start position</param>
            <param name="endTime">the track end position</param>
            <param name="noReplace">
                a value indicating whether the track play should be ignored if the same track is
                currently playing
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.ReplayAsync">
            <summary>
                Replays the current track asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.ResumeAsync">
            <summary>
                Resumes the current playing track asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the current playing track is not paused
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.SeekPositionAsync(System.TimeSpan)">
            <summary>
                Seeks the current playing track asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.NotSupportedException">
                thrown if the current playing track does not support seeking.
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.SetVolumeAsync(System.Single,System.Boolean)">
            <summary>
                Updates the player volume asynchronously.
            </summary>
            <param name="volume">the player volume (0f - 10f)</param>
            <param name="normalize">
                a value indicating whether if the <paramref name="volume"/> is out of range (0f -
                10f) it should be normalized in its range. For example 11f will be mapped to 10f and
                -20f to 0f.
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="volume"/> is out of range (0f - 10f)
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.StopAsync(System.Boolean)">
            <summary>
                Stops playing the current track asynchronously.
            </summary>
            <param name="disconnect">
                a value indicating whether the connection to the voice server should be closed
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.UpdateEqualizerAsync(System.Collections.Generic.IEnumerable{Lavalink4NET.Player.EqualizerBand},System.Boolean)">
            <summary>
                Updates the player equalizer asynchronously.
            </summary>
            <param name="bands">the bands</param>
            <param name="reset">
                a value indicating whether the equalizer bands should be overridden ( <see
                langword="false"/>) or replaced ( <see langword="true"/>).
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.DisconnectAsync(Lavalink4NET.Events.PlayerDisconnectCause)">
            <summary>
                Disconnects the player asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.UpdateAsync(Lavalink4NET.VoiceServer)">
            <summary>
                Updates the voice server and sends the data to the Lavalink Node if the voice state
                is also provided.
            </summary>
            <param name="voiceServer">the voice server data</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.UpdateAsync(Lavalink4NET.VoiceState)">
            <summary>
                Updates the voice state and sends the data to the Lavalink Node if the voice server
                is also provided.
            </summary>
            <param name="voiceState">the voice state data</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.UpdateAsync">
            <summary>
                Sends the voice state and server data to the Lavalink Node if both is provided.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.EnsureConnected">
            <summary>
                Throws an <see cref="T:System.InvalidOperationException"/> when the player is not connected
                to a voice channel.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.EnsureNotDestroyed">
            <summary>
                Throws an <see cref="T:System.InvalidOperationException"/> when the player is destroyed.
            </summary>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="T:Lavalink4NET.Player.LavalinkQueue">
            <summary>
                A thread-safe queue for <see cref="T:Lavalink4NET.Player.LavalinkTrack"/>.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.LavalinkQueue"/> class.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkQueue.Count">
            <summary>
                Gets the number of queued tracks.
            </summary>
            <remarks>
                This property is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkQueue.IsEmpty">
            <summary>
                Gets a value indicating whether the queue is empty.
            </summary>
            <remarks>
                This property is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkQueue.IsReadOnly">
            <summary>
                Gets a value indicating whether the queue is read-only.
            </summary>
            <remarks>
                This property is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkQueue.Tracks">
            <summary>
                Gets or sets the enqueued tracks.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkQueue.Item(System.Int32)">
            <summary>
                Gets or sets the track at the specified <paramref name="index"/>.
            </summary>
            <remarks>
                This indexer property is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="index">the zero-based position</param>
            <returns>the track at the specified <paramref name="index"/></returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.Add(Lavalink4NET.Player.LavalinkTrack)">
            <summary>
                Adds a track at the end of the queue.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="track">the track to add</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="track"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.AddRange(System.Collections.Generic.IEnumerable{Lavalink4NET.Player.LavalinkTrack})">
            <summary>
                Adds all specified <paramref name="tracks"/> to the queue.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="tracks">the tracks to enqueue</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="tracks"/> enumerable is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.Clear">
            <summary>
                Clears all tracks from the queue.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <returns>the number of tracks removed</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.System#Collections#Generic#ICollection{Lavalink4NET#Player#LavalinkTrack}#Clear">
            <summary>
                Clears the queue.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.Contains(Lavalink4NET.Player.LavalinkTrack)">
            <summary>
                Gets a value indicating whether the specified <paramref name="track"/> is in the queue.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="track">the track to find</param>
            <returns>
                a value indicating whether the specified <paramref name="track"/> is in the queue
            </returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.CopyTo(Lavalink4NET.Player.LavalinkTrack[],System.Int32)">
            <summary>
                Copies all tracks to the specified <paramref name="array"/> at the specified <paramref name="index"/>.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="array">the array to the tracks to</param>
            <param name="index">the zero-based writing start index</param>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.Dequeue">
            <summary>
                Dequeues a track using the FIFO method.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <returns>the dequeued track</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if no tracks were in the queue
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.Distinct">
            <summary>
                Deletes all duplicate tracks from the queue.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.GetEnumerator">
            <summary>
                Gets the track enumerator.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <returns>the track enumerator</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the track enumerator.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <returns>the track enumerator</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.IndexOf(Lavalink4NET.Player.LavalinkTrack)">
            <summary>
                Gets the zero-based index of the specified <paramref name="track"/>.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="track">the track to locate</param>
            <returns>the zero-based index of the specified <paramref name="track"/></returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="track"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.Insert(System.Int32,Lavalink4NET.Player.LavalinkTrack)">
            <summary>
                Inserts the specified <paramref name="track"/> at the specified <paramref name="index"/>.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="index">the zero-based index to insert (e.g. 0 = top)</param>
            <param name="track">the track to insert</param>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.Remove(Lavalink4NET.Player.LavalinkTrack)">
            <summary>
                Tries to remove the specified <paramref name="track"/> from the queue.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="track">the track to remove</param>
            <returns>
                a value indicating whether the track was found and removed from the queue
            </returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.RemoveAll(System.Predicate{Lavalink4NET.Player.LavalinkTrack})">
            <summary>
                Removes all tracks that matches the specified <paramref name="predicate"/>.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="predicate">the track predicate</param>
            <returns>the number of tracks removed</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.RemoveAt(System.Int32)">
            <summary>
                Removes a track at the specified <paramref name="index"/>.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="index">the index to remove the track</param>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.RemoveRange(System.Int32,System.Int32)">
            <summary>
                Removes all <paramref name="count"/> tracks from the specified <paramref name="index"/>.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="index">the start index (zero-based)</param>
            <param name="count">the number of tracks to remove</param>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.Shuffle">
            <summary>
                Shuffles / mixes all tracks in the queue.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkQueue.TryDequeue(Lavalink4NET.Player.LavalinkTrack@)">
            <summary>
                Tries to dequeue a track using the FIFO method.
            </summary>
            <remarks>
                This method is thread-safe, so it can be used from multiple threads at once safely.
            </remarks>
            <param name="track">the dequeued track; or default is the result is <see langword="false"/>.</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if no tracks were in the queue
            </exception>
            <returns>a value indicating whether a track was dequeued.</returns>
        </member>
        <member name="T:Lavalink4NET.Player.LavalinkTrack">
            <summary>
                The information of a lavalink track.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkTrack.#ctor(System.String,Lavalink4NET.Player.LavalinkTrackInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.LavalinkTrack"/> class.
            </summary>
            <param name="identifier">the track identifier</param>
            <param name="info">the track info</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="identifier"/> is blank.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkTrack.#ctor(System.String,System.String,System.TimeSpan,System.Boolean,System.Boolean,System.String,System.String,System.String,Lavalink4NET.Player.StreamProvider)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.LavalinkTrack"/> class.
            </summary>
            <param name="identifier">an unique track identifier</param>
            <param name="author">the name of the track author</param>
            <param name="duration">the duration of the track</param>
            <param name="isLiveStream">a value indicating whether the track is a live stream</param>
            <param name="isSeekable">a value indicating whether the track is seek-able</param>
            <param name="source">the track source</param>
            <param name="title">the title of the track</param>
            <param name="trackIdentifier">
                the unique track identifier (Example: dQw4w9WgXcQ, YouTube Video ID)
            </param>
            <param name="provider">the stream provider (e.g. YouTube)</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="identifier"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="author"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="source"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="title"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkTrack.#ctor(Lavalink4NET.Player.LavalinkTrackInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.LavalinkTrack"/> class.
            </summary>
            <param name="info">the track info</param>
            <exception cref="T:System.ArgumentNullException">
                the specified <paramref name="info"/> can not be <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Author">
            <summary>
                Gets the name of the track author.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Duration">
            <summary>
                Gets the duration of the track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Identifier">
            <summary>
                Gets an unique track identifier.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.IsLiveStream">
            <summary>
                Gets a value indicating whether the track is a live stream.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.IsSeekable">
            <summary>
                Gets a value indicating whether the track is seek-able.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Position">
            <summary>
                Gets the start position of the track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Provider">
            <summary>
                Gets the stream provider (e.g. YouTube).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Source">
            <summary>
                Gets the track source.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Title">
            <summary>
                Gets the title of the track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.TrackIdentifier">
            <summary>
                Gets the unique track identifier (Example: dQw4w9WgXcQ, YouTube Video ID).
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkTrack.Clone">
            <summary>
                Clones the current track.
            </summary>
            <returns>the cloned <see cref="T:Lavalink4NET.Player.LavalinkTrack"/> instance</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkTrack.WithPosition(System.TimeSpan)">
            <summary>
                Clones the current track and sets the starting position to the specified <paramref name="position"/>.
            </summary>
            <param name="position">the starting position</param>
            <returns>the cloned <see cref="T:Lavalink4NET.Player.LavalinkTrack"/> instance</returns>
        </member>
        <member name="T:Lavalink4NET.Player.LavalinkTrackInfo">
            <summary>
                The information store for a lavalink track.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkTrackInfo.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.LavalinkTrackInfo"/> class.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.Author">
            <summary>
                Gets the name of the track author.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.Duration">
            <summary>
                Gets the duration of the track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.IsLiveStream">
            <summary>
                Gets a value indicating whether the track is a live stream.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.IsSeekable">
            <summary>
                Gets a value indicating whether the track is seek-able.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.Position">
            <summary>
                Gets the start position of the track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.Source">
            <summary>
                Gets the track source.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.Title">
            <summary>
                Gets the title of the track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.TrackIdentifier">
            <summary>
                Gets the unique track identifier (Example: dQw4w9WgXcQ, YouTube Video ID).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.PlayerState">
            <summary>
                Represents different player states.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.PlayerState.Playing">
            <summary>
                The player is playing a track.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.PlayerState.NotPlaying">
            <summary>
                The player is in idle state and is not playing any track.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.PlayerState.Destroyed">
            <summary>
                The connection to the voice server is closed and the player should not be used anymore.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.PlayerState.Paused">
            <summary>
                The current track is paused and can be resumed.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.PlayerState.NotConnected">
            <summary>
                The player is not connected to a voice channel.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.QueuedLavalinkPlayer">
            <summary>
                A lavalink player with a queuing system.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.#ctor(Lavalink4NET.LavalinkSocket,Lavalink4NET.IDiscordClientWrapper,System.UInt64,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.QueuedLavalinkPlayer"/> class.
            </summary>
            <param name="lavalinkSocket">the lavalink socket</param>
            <param name="client">the discord client</param>
            <param name="guildId">the identifier of the guild that is controlled by the player</param>
            <param name="disconnectOnStop">
                a value indicating whether the player should stop after the track finished playing
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="lavalinkSocket"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="client"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Player.QueuedLavalinkPlayer.IsLooping">
            <summary>
                Gets or sets a value indicating whether the current playing track should be looped.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.QueuedLavalinkPlayer.Queue">
            <summary>
                Gets the track queue.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.OnTrackEndAsync(Lavalink4NET.Events.TrackEndEventArgs)">
            <summary>
                Asynchronously triggered when a track ends.
            </summary>
            <param name="eventArgs">the track event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.PlayAsync(Lavalink4NET.Player.LavalinkTrack,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
                Plays the specified <paramref name="track"/> asynchronously.
            </summary>
            <param name="track">the track to play</param>
            <param name="startTime">the track start position</param>
            <param name="endTime">the track end position</param>
            <param name="noReplace">
                a value indicating whether the track play should be ignored if the same track is
                currently playing
            </param>
            <returns>
                a task that represents the asynchronous operation
                <para>the position in the track queue ( <c>0</c> = now playing)</para>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.PlayAsync(Lavalink4NET.Player.LavalinkTrack,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
                Plays the specified <paramref name="track"/> asynchronously.
            </summary>
            <param name="track">the track to play</param>
            <param name="enqueue">
                a value indicating whether the track should be enqueued in the track queue
            </param>
            <param name="startTime">the track start position</param>
            <param name="endTime">the track end position</param>
            <param name="noReplace">
                a value indicating whether the track play should be ignored if the same track is
                currently playing
            </param>
            <returns>
                a task that represents the asynchronous operation
                <para>the position in the track queue ( <c>0</c> = now playing)</para>
            </returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.PlayTopAsync(Lavalink4NET.Player.LavalinkTrack)">
            <summary>
                Plays the specified <paramref name="track"/> at the top of the queue asynchronously.
            </summary>
            <param name="track">the track to play</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.PushTrackAsync(Lavalink4NET.Player.LavalinkTrack,System.Boolean)">
            <summary>
                Pushes a track between the current asynchronously.
            </summary>
            <param name="track">the track to push between the current</param>
            <param name="push">
                a value indicating whether the track should only played when a track is playing currently.
            </param>
            <remarks>
                Note: This feature is experimental. This will stop playing the current track and
                start playing the specified <paramref name="track"/> after the track is finished the
                track will restart at the stopped position. This can be useful for example
                soundboards (playing an air-horn or something).
            </remarks>
            <returns>
                a task that represents the asynchronous operation. The task result is a value
                indicating whether the track was pushed between the current ( <see langword="true"/>)
                or the specified track was simply started ( <see langword="false"/>), because there
                is no track playing.
            </returns>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.SkipAsync(System.Int32)">
            <summary>
                Skips the current track asynchronously.
            </summary>
            <param name="count">the number of tracks to skip</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.StopAsync(System.Boolean)">
            <summary>
                Stops playing the current track asynchronously.
            </summary>
            <param name="disconnect">
                a value indicating whether the connection to the voice server should be closed
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="T:Lavalink4NET.Player.StreamProvider">
            <summary>
                A set of different stream providers supported by lavaplayer (https://github.com/sedmelluq/lavaplayer).
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.StreamProvider.Unknown">
            <summary>
                Unknown stream provider.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.StreamProvider.YouTube">
            <summary>
                A stream from YouTube.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.StreamProvider.SoundCloud">
            <summary>
                A stream from SoundCloud.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.StreamProvider.Bandcamp">
            <summary>
                A stream from Bandcamp.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.StreamProvider.Vimeo">
            <summary>
                A stream from Vimeo.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.StreamProvider.Twitch">
            <summary>
                A stream from Twitch.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.StreamProvider.Local">
            <summary>
                A stream from a local file.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.StreamProvider.Http">
            <summary>
                A stream from a HTTP URL (mp3, flac, wav, WebM, MP4/M4A, OGG, AAC, M3U or PLS).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.TrackEndReason">
            <summary>
                The different reason for a track ending.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.TrackEndReason.Finished">
            <summary>
                The track finished.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.TrackEndReason.LoadFailed">
            <summary>
                The load of the track failed.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.TrackEndReason.Stopped">
            <summary>
                The track was stopped.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.TrackEndReason.Replaced">
            <summary>
                The track was replaced by another.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.TrackEndReason.CleanUp">
            <summary>
                The player was destroyed.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.UserVoteSkipInfo">
            <summary>
                Contains information about the current vote information and the submitted user vote.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.UserVoteSkipInfo.#ctor(Lavalink4NET.Player.VoteSkipInfo,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.UserVoteSkipInfo"/> class.
            </summary>
            <param name="info">the <see cref="T:Lavalink4NET.Player.VoteSkipInfo"/> to clone</param>
            <param name="wasSkipped">
                a value indicating whether the user vote submit caused that the current playing track
                was skipped
            </param>
            <param name="wasAdded">
                a value indicating whether the user vote submit was added to the vote list
            </param>
        </member>
        <member name="M:Lavalink4NET.Player.UserVoteSkipInfo.#ctor(System.Collections.Generic.IReadOnlyCollection{System.UInt64},System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.UserVoteSkipInfo"/> class.
            </summary>
            <param name="votes">
                a collection of the snowflake identifier values of the users that voted for skipping
                the current track
            </param>
            <param name="totalUsers">
                the total number of users in the voice channel (the bot is excluded)
            </param>
            <param name="wasSkipped">
                a value indicating whether the user vote submit caused that the current playing track
                was skipped
            </param>
            <param name="wasAdded">
                a value indicating whether the user vote submit was added to the vote list
            </param>
        </member>
        <member name="P:Lavalink4NET.Player.UserVoteSkipInfo.WasSkipped">
            <summary>
                Gets a value indicating whether the user vote submit caused that the current playing
                track was skipped.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.UserVoteSkipInfo.WasAdded">
            <summary>
                Gets a value indicating whether the user vote submit was added to the vote list.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.VoteLavalinkPlayer">
            <summary>
                A lavalink player with a queuing and voting system.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.VoteLavalinkPlayer.OnTrackEndAsync(Lavalink4NET.Events.TrackEndEventArgs)">
            <summary>
                Asynchronously triggered when a track ends.
            </summary>
            <param name="eventArgs">the track event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.VoteLavalinkPlayer.#ctor(Lavalink4NET.LavalinkSocket,Lavalink4NET.IDiscordClientWrapper,System.UInt64,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.VoteLavalinkPlayer"/> class.
            </summary>
            <param name="lavalinkSocket">the lavalink socket</param>
            <param name="client">the discord client</param>
            <param name="guildId">the identifier of the guild that is controlled by the player</param>
            <param name="disconnectOnStop">
                a value indicating whether the player should stop after the track finished playing
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="lavalinkSocket"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="client"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.VoteLavalinkPlayer.GetVoteInfoAsync">
            <summary>
                Gets the player skip vote info.
            </summary>
            <returns>the vote info</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.VoteLavalinkPlayer.ClearVotes">
            <summary>
                Clears all user votes.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.VoteLavalinkPlayer.VoteAsync(System.UInt64,System.Single)">
            <summary>
                Submits an user vote asynchronously.
            </summary>
            <param name="userId">the user snowflake identifier</param>
            <param name="percentage">the minimum voting percentage to skip the track</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="T:Lavalink4NET.Player.VoteSkipInfo">
            <summary>
                Contains information about the current vote information of the player.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.VoteSkipInfo.#ctor(System.Collections.Generic.IReadOnlyCollection{System.UInt64},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.VoteSkipInfo"/> class.
            </summary>
            <param name="votes">
                a collection of the snowflake identifier values of the users that voted for skipping
                the current track
            </param>
            <param name="totalUsers">
                the total number of users in the voice channel (the bot is excluded)
            </param>
            <exception cref="T:System.ArgumentNullException">
                the specified <paramref name="votes"/> can not be <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Player.VoteSkipInfo.Percentage">
            <summary>
                Gets the vote percentage in range of 0 - 1f.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.VoteSkipInfo.Votes">
            <summary>
                Gets a collection of the snowflake identifier values of the users that voted for
                skipping the current track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.VoteSkipInfo.TotalUsers">
            <summary>
                Gets the total number of users in the voice channel (the bot is excluded).
            </summary>
        </member>
        <member name="T:Lavalink4NET.ReconnectStrategies">
            <summary>
                A set of out-of-box reconnect strategies provided by Lavalink4NET.
            </summary>
        </member>
        <member name="P:Lavalink4NET.ReconnectStrategies.DefaultStrategy">
            <summary>
                The default reconnection strategy.
            </summary>
        </member>
        <member name="P:Lavalink4NET.ReconnectStrategies.None">
            <summary>
                A reconnection strategy that disables the reconnection.
            </summary>
        </member>
        <member name="T:Lavalink4NET.ReconnectStrategy">
            <summary>
                The delegate for a reconnection strategy.
            </summary>
            <param name="start">the time when the reconnection started / the connection was lost</param>
            <param name="tries">the number of tries to reconnect (one-based)</param>
            <returns>
                the time to wait to the next reconnect; or <see langword="null"/> if it is wanted to give
                up reconnecting to the node.
            </returns>
        </member>
        <member name="T:Lavalink4NET.Rest.ILavalinkRestClient">
            <summary>
                An interface for a lavalink rest client, that can load tracks from a node.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Rest.ILavalinkRestClient.GetTrackAsync(System.String,Lavalink4NET.Rest.SearchMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Gets the track for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <param name="noCache">
                a value indicating whether the track should be returned from cache, if it is cached.
                Note this parameter does only take any effect is a cache provider is specified in constructor.
            </param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result is the track found
                for the specified <paramref name="query"/>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Rest.ILavalinkRestClient.GetTracksAsync(System.String,Lavalink4NET.Rest.SearchMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Gets the tracks for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <param name="noCache">
                a value indicating whether the track should be returned from cache, if it is cached.
                Note this parameter does only take any effect is a cache provider is specified in constructor.
            </param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result are the tracks
                found for the specified <paramref name="query"/>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Rest.ILavalinkRestClient.LoadTracksAsync(System.String,Lavalink4NET.Rest.SearchMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Loads the tracks specified by the <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the search query</param>
            <param name="mode">the track search mode</param>
            <param name="noCache">
                a value indicating whether the track should be returned from cache, if it is cached.
                Note this parameter does only take any effect is a cache provider is specified in constructor.
            </param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result is the request
                response for the specified <paramref name="query"/>.
            </returns>
        </member>
        <member name="T:Lavalink4NET.Rest.LavalinkRestClient">
            <summary>
                Lavalink RESTful HTTP api client.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.LavalinkRestClient.VersionHeaderName">
            <summary>
                The header name for the version of the Lavalink HTTP response from the node. See
                https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md#significant-changes-v20---v30
                for more details.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.#ctor(Lavalink4NET.Rest.LavalinkRestOptions,Lavalink4NET.Logging.ILogger,Lavalink4NET.ILavalinkCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Rest.LavalinkRestClient"/> class.
            </summary>
            <param name="options">the rest client options</param>
            <param name="logger">the logger</param>
            <param name="cache">an optional cache that caches track requests</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="options"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the track cache time ( <see cref="P:Lavalink4NET.Rest.RestClientOptions.CacheTime"/>) is equal
                or less than <see cref="F:System.TimeSpan.Zero"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.Dispose">
            <summary>
                Disposes the inner HTTP client.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.GetTrackAsync(System.String,Lavalink4NET.Rest.SearchMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Gets the track for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <param name="noCache">
                a value indicating whether the track should be returned from cache, if it is cached.
                Note this parameter does only take any effect is a cache provider is specified in constructor.
            </param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result is the track
                found for the specified <paramref name="query"/>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.GetTracksAsync(System.String,Lavalink4NET.Rest.SearchMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Gets the tracks for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <param name="noCache">
                a value indicating whether the track should be returned from cache, if it is cached.
                Note this parameter does only take any effect is a cache provider is specified in constructor.
            </param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result are the tracks
                found for the specified <paramref name="query"/>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.LoadTracksAsync(System.String,Lavalink4NET.Rest.SearchMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Loads the tracks specified by the <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the search query</param>
            <param name="mode">the track search mode</param>
            <param name="noCache">
                a value indicating whether the track should be returned from cache, if it is cached.
                Note this parameter does only take any effect is a cache provider is specified in constructor.
            </param>
            <param name="cancellationToken">
                a cancellation token that can be used by other objects or threads to receive notice
                of cancellation.
            </param>
            <returns>
                a task that represents the asynchronous operation. The task result is the request
                response for the specified <paramref name="query"/>.
            </returns>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.VerifyResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
                Verifies the specified <paramref name="response"/>. This makes sure that the right
                Lavalink Server version is used and the response status code is success.
            </summary>
            <param name="response">the response received</param>
        </member>
        <member name="T:Lavalink4NET.Rest.LavalinkRestOptions">
            <summary>
                The options for a lavalink rest client ( <see cref="T:Lavalink4NET.Rest.ILavalinkRestClient"/>).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.LavalinkRestOptions.DebugPayloads">
            <summary>
                Gets or sets a value indicating whether payload I/O (including rest) should be logged
                to the logger (This should be only used for development)
            </summary>
            <remarks>This property defaults to <see langword="false"/>.</remarks>
        </member>
        <member name="P:Lavalink4NET.Rest.LavalinkRestOptions.Password">
            <summary>
                Gets or sets the Lavalink Node Password.
            </summary>
            <remarks>This property defaults to <c>"youshallnotpass"</c>.</remarks>
        </member>
        <member name="P:Lavalink4NET.Rest.LavalinkRestOptions.RestUri">
            <summary>
                Gets or sets the Lavalink Node restful HTTP api URI.
            </summary>
            <remarks>This property defaults to <c>http://localhost:8080/</c>.</remarks>
        </member>
        <member name="T:Lavalink4NET.Rest.PlaylistInfo">
            <summary>
                The playlist info object for the track load response.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.PlaylistInfo.SelectedTrack">
            <summary>
                Gets the index of the selected track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.PlaylistInfo.Name">
            <summary>
                Gets the name of the playlist.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Rest.RestClientOptions">
            <summary>
                An abstraction for the options for a RESTful HTTP client.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.RestClientOptions.CacheTime">
            <summary>
                Gets or sets the time how long a request should be cached.
            </summary>
            <remarks>
                Note higher time spans can cause more memory usage, but reduce the number of requests made.
            </remarks>
            <remarks>This property defaults to <c>TimeSpan.FromMinutes(5)</c>.</remarks>
        </member>
        <member name="P:Lavalink4NET.Rest.RestClientOptions.Decompression">
            <summary>
                Gets or sets a value indicating whether the HTTP client accepts compressed payloads.
            </summary>
            <remarks>This property defaults to <see langword="true"/>.</remarks>
        </member>
        <member name="P:Lavalink4NET.Rest.RestClientOptions.RestUri">
            <summary>
                Gets or sets the RESTful HTTP api endpoint.
            </summary>
            <remarks>This property defaults to <c>http://localhost:8080/</c>.</remarks>
        </member>
        <member name="P:Lavalink4NET.Rest.RestClientOptions.UserAgent">
            <summary>
                Gets or sets the user-agent for HTTP requests (use <see langword="null"/> to disable
                the custom user-agent header).
            </summary>
            <remarks>This property defaults to <c>"Lavalink4NET"</c>.</remarks>
        </member>
        <member name="T:Lavalink4NET.Rest.SearchMode">
            <summary>
                Different search modes for the "/tracks" endpoint.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.SearchMode.None">
            <summary>
                Accepts raw queries.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.SearchMode.YouTube">
            <summary>
                Only searches for links and YouTube videos.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.SearchMode.SoundCloud">
            <summary>
                Only searches for links and SoundCloud tracks.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Rest.TrackLoadException">
            <summary>
                An exception for track load exception.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Rest.TrackLoadException.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Rest.TrackLoadException"/> class.
            </summary>
            <param name="friendlyMessage">a localized message from the Lavalink Node</param>
            <param name="severity">
                the exception severity; 'COMMON' indicates that the exception is not from Lavalink itself.
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="severity"/> is <see langword="null"/>.
            </exception>
            <remarks>
                This is a JSON constructor, which should be only used by Json.Net for the
                deserialization of the object.
            </remarks>
        </member>
        <member name="P:Lavalink4NET.Rest.TrackLoadException.Severity">
            <summary>
                Gets the exception severity.
            </summary>
            <remarks>'COMMON' indicates that the exception is not from Lavalink itself</remarks>
        </member>
        <member name="T:Lavalink4NET.Rest.TrackLoadResponsePayload">
            <summary>
                t The RESTful api HTTP response object for request to the "/tracks" endpoint.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.TrackLoadResponsePayload.Exception">
            <summary>
                Gets an exception that indicates why the track load failed (see: <see cref="P:Lavalink4NET.Rest.TrackLoadResponsePayload.LoadType"/>).
            </summary>
            <remarks>This property is only available if <see cref="T:Lavalink4NET.Rest.TrackLoadType"/> is <see cref="F:Lavalink4NET.Rest.TrackLoadType.LoadFailed"/>.</remarks>
        </member>
        <member name="P:Lavalink4NET.Rest.TrackLoadResponsePayload.LoadType">
            <summary>
                Gets the type of what was loaded.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.TrackLoadResponsePayload.PlaylistInfo">
            <summary>
                Gets the information about the playlist.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.TrackLoadResponsePayload.Tracks">
            <summary>
                Gets the loaded tracks.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Rest.TrackLoadType">
            <summary>
                The possible track load types.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.TrackLoadType.TrackLoaded">
            <summary>
                A single track was loaded.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.TrackLoadType.PlaylistLoaded">
            <summary>
                A playlist was loaded.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.TrackLoadType.SearchResult">
            <summary>
                A search result was made.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.TrackLoadType.NoMatches">
            <summary>
                No matches were found for the given identifier.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.TrackLoadType.LoadFailed">
            <summary>
                Something happened while loading the track(s).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Statistics.FrameStatistics">
            <summary>
                The frame statistics of a lavalink node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.FrameStatistics.AverageFramesSent">
            <summary>
                Gets the number of average frames sent per minute.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.FrameStatistics.AverageNulledFrames">
            <summary>
                Gets the number of average nulled frames per minute.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.FrameStatistics.AverageDeficitFrames">
            <summary>
                Gets the number of average deficit frames per minute.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Statistics.MemoryStatistics">
            <summary>
                A wrapper for the statistics.memory object in the statistics update from the lavalink server.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.MemoryStatistics.FreeMemory">
            <summary>
                The free RAM memory in bytes.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.MemoryStatistics.UsedMemory">
            <summary>
                The used RAM memory in bytes.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.MemoryStatistics.AllocatedMemory">
            <summary>
                The allocated RAM memory in bytes.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.MemoryStatistics.ReservableMemory">
            <summary>
                The reservable RAM memory in bytes.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Statistics.NodeStatistics">
            <summary>
                The statistics for a <see cref="T:Lavalink4NET.LavalinkNode"/>.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Statistics.NodeStatistics.#ctor(System.Int32,System.Int32,System.TimeSpan,Lavalink4NET.Statistics.MemoryStatistics,Lavalink4NET.Statistics.ProcessorStatistics,Lavalink4NET.Statistics.FrameStatistics)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Statistics.NodeStatistics"/> class.
            </summary>
            <param name="players">the number of players the node is holding</param>
            <param name="playingPlayers">
                the number of players that are currently playing using the node
            </param>
            <param name="uptime">the uptime from the node (how long the node is online)</param>
            <param name="memory">the usage statistics for the memory of the node</param>
            <param name="processor">the usage statistics for the processor of the node</param>
            <param name="frameStatistics">the frame statistics of the node</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="memory"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="processor"/> parameter is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Statistics.NodeStatistics.Players">
            <summary>
                Gets the number of players the node is holding.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.NodeStatistics.PlayingPlayers">
            <summary>
                Gets the number of players that are currently playing using the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.NodeStatistics.Uptime">
            <summary>
                Gets the uptime from the node (how long the node is online).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.NodeStatistics.Memory">
            <summary>
                Gets the usage statistics for the memory of the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.NodeStatistics.Processor">
            <summary>
                Gets the usage statistics for the processor of the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.NodeStatistics.FrameStatistics">
            <summary>
                Gets the frame statistics of the node.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Statistics.ProcessorStatistics">
            <summary>
                A wrapper for the statistics.processor object in the statistics update from the lavalink server.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.ProcessorStatistics.Cores">
            <summary>
                The number of cores the system has.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.ProcessorStatistics.SystemLoad">
            <summary>
                The system load (percentage).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.ProcessorStatistics.NodeLoad">
            <summary>
                The node load (percentage).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Tracking.DefaultInactivityTrackers">
            <summary>
                A set of default out-of-box inactivity trackers.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Tracking.DefaultInactivityTrackers.UsersInactivityTracker">
            <summary>
                An inactivity tracker ( <see cref="T:Lavalink4NET.Tracking.InactivityTracker"/>) which marks a player as
                "inactive" when there are no users in the channel except the bot itself.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Tracking.DefaultInactivityTrackers.ChannelInactivityTracker">
            <summary>
                An inactivity tracker ( <see cref="T:Lavalink4NET.Tracking.InactivityTracker"/>) which marks a player as
                "inactive" when the player is not playing a track.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Tracking.InactivePlayerEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.Tracking.InactivityTrackingService.InactivePlayer"/>.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivePlayerEventArgs.#ctor(Lavalink4NET.IAudioService,Lavalink4NET.Player.LavalinkPlayer)">
            <summary>
                Initialize a new instance of the <see cref="T:Lavalink4NET.Tracking.InactivePlayerEventArgs"/> class.
            </summary>
            <param name="audioService">the audio service</param>
            <param name="player">the affected player</param>
        </member>
        <member name="P:Lavalink4NET.Tracking.InactivePlayerEventArgs.AudioService">
            <summary>
                Gets the audio service.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Tracking.InactivePlayerEventArgs.Player">
            <summary>
                Gets the affected player.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Tracking.InactivePlayerEventArgs.ShouldStop">
            <summary>
                Gets a value indicating whether the player should be stopped.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Tracking.InactivityTracker">
            <summary>
                A delegate for an asynchronous player inactivity tracker.
            </summary>
            <param name="player">the player to check for inactivity</param>
            <param name="client">the discord client wrapper</param>
            <returns>
                a task that represents the asynchronous task. The task result is a value indicating
                whether the specified <paramref name="player"/> is inactive.
            </returns>
        </member>
        <member name="T:Lavalink4NET.Tracking.InactivityTrackingOptions">
            <summary>
                The options for the <see cref="T:Lavalink4NET.Tracking.InactivityTrackingService"/>.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Tracking.InactivityTrackingOptions.DelayFirstTrack">
            <summary>
                Gets or sets a value indicating whether the first track (after using
                <see cref="M:Lavalink4NET.Tracking.InactivityTrackingService.BeginTracking"/>) should be delayed using the <see cref="P:Lavalink4NET.Tracking.InactivityTrackingOptions.PollInterval"/>.
            </summary>
            <remarks>This property defaults to <see langword="true"/>.</remarks>
        </member>
        <member name="P:Lavalink4NET.Tracking.InactivityTrackingOptions.DisconnectDelay">
            <summary>
                Gets or sets the delay for a player stop. Use <see cref="F:System.TimeSpan.Zero"/> for
                disconnect immediately from the channel.
            </summary>
            <remarks>This property defaults to <c>TimeSpan.FromSeconds(30)</c></remarks>
        </member>
        <member name="P:Lavalink4NET.Tracking.InactivityTrackingOptions.PollInterval">
            <summary>
                Gets or sets the poll interval for the <see cref="T:Lavalink4NET.Tracking.InactivityTrackingService"/> in
                which the players should be tested for inactivity. This also affects the <see cref="P:Lavalink4NET.Tracking.InactivityTrackingOptions.DisconnectDelay"/>.
            </summary>
            <remarks>This property defaults to <c>TimeSpan.FromSeconds(5)</c></remarks>
        </member>
        <member name="P:Lavalink4NET.Tracking.InactivityTrackingOptions.TrackInactivity">
            <summary>
                Gets or sets a value indicating whether the <see cref="T:Lavalink4NET.Tracking.InactivityTrackingService"/>
                should start tracking inactive players after constructing it.
            </summary>
            <remarks>This property defaults to <see langword="false"/>.</remarks>
        </member>
        <member name="T:Lavalink4NET.Tracking.InactivityTrackingService">
            <summary>
                A service that tracks not-playing players to reduce the usage of the Lavalink nodes.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.#ctor(Lavalink4NET.IAudioService,Lavalink4NET.IDiscordClientWrapper,Lavalink4NET.Tracking.InactivityTrackingOptions,Lavalink4NET.Logging.ILogger)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Tracking.InactivityTrackingService"/> class.
            </summary>
            <param name="audioService">the audio service where the players should be tracked</param>
            <param name="clientWrapper">the discord client wrapper</param>
            <param name="options">the tracking options</param>
            <param name="logger">the optional logger</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="audioService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="clientWrapper"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="options"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="E:Lavalink4NET.Tracking.InactivityTrackingService.InactivePlayer">
            <summary>
                An asynchronously event that is triggered when an inactive player was found.
            </summary>
        </member>
        <member name="E:Lavalink4NET.Tracking.InactivityTrackingService.PlayerTrackingStatusUpdated">
            <summary>
                An asynchronously event that is triggered when a player's tracking status (
                <see cref="T:Lavalink4NET.Tracking.InactivityTrackingStatus"/>) was updated.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Tracking.InactivityTrackingService.IsTracking">
            <summary>
                Gets a value indicating whether the service is tracking inactive players.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Tracking.InactivityTrackingService.Trackers">
            <summary>
                Gets all trackers.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.AddTracker(Lavalink4NET.Tracking.InactivityTracker)">
            <summary>
                Adds a tracker to the track list dynamically.
            </summary>
            <param name="tracker">the tracker to add</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="tracker"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.BeginTracking">
            <summary>
                Beings tracking of inactive players.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                thrown if the service is already tracking inactive players.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.ClearTrackers">
            <summary>
                Removes all registered trackers.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.Dispose">
            <summary>
                Disposes the underlying timer.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.GetStatus(Lavalink4NET.Player.LavalinkPlayer)">
            <summary>
                Gets the tracking status of the specified <paramref name="player"/>.
            </summary>
            <param name="player">the player</param>
            <returns>the inactivity tracking status of the player</returns>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.PollAsync">
            <summary>
                Force polls tracking of all inactive players asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.RemoveTracker(Lavalink4NET.Tracking.InactivityTracker)">
            <summary>
                Removes a tracker from the tracker list dynamically.
            </summary>
            <param name="tracker">the tracker to remove</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="tracker"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.StopTracking">
            <summary>
                Stops tracking of inactive players.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                thrown if the service is not tracking inactive players.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.UntrackPlayerAsync(Lavalink4NET.Player.LavalinkPlayer)">
            <summary>
                Removes the specified <paramref name="player"/> from the inactivity tracking list asynchronously.
            </summary>
            <param name="player">the player to remove</param>
            <returns>
                a task that represents the asynchronous operation. The task result is a value
                indicating whether the player was removed from the tracking list.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.IsInactiveAsync(Lavalink4NET.Player.LavalinkPlayer)">
            <summary>
                Gets a value indicating whether the specified <paramref name="player"/> is inactive asynchronously.
            </summary>
            <param name="player">the player to check</param>
            <returns>
                a task that represents the asynchronous operation. The task result is a value
                indicating whether the specified <paramref name="player"/> is inactive.
            </returns>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.OnInactivePlayerAsync(Lavalink4NET.Tracking.InactivePlayerEventArgs)">
            <summary>
                Triggers the <see cref="E:Lavalink4NET.Tracking.InactivityTrackingService.InactivePlayer"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Tracking.InactivityTrackingService.OnPlayerTrackingStatusUpdated(Lavalink4NET.Tracking.PlayerTrackingStatusUpdateEventArgs)">
            <summary>
                Triggers the <see cref="E:Lavalink4NET.Tracking.InactivityTrackingService.PlayerTrackingStatusUpdated"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Tracking.InactivityTrackingStatus">
            <summary>
                The tracking states for players.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Tracking.InactivityTrackingStatus.Untracked">
            <summary>
                The player is not tracked and is active.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Tracking.InactivityTrackingStatus.Tracked">
            <summary>
                The player is tracked for inactivity, but the stop delay was not exceeded.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Tracking.InactivityTrackingStatus.Inactive">
            <summary>
                The player was tracked for inactivity and will be stopped on the next poll.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Tracking.PlayerTrackingStatusUpdateEventArgs">
            <summary>
                The event arguments for the
                <see cref="E:Lavalink4NET.Tracking.InactivityTrackingService.PlayerTrackingStatusUpdated"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Tracking.PlayerTrackingStatusUpdateEventArgs.#ctor(Lavalink4NET.IAudioService,Lavalink4NET.Player.LavalinkPlayer,Lavalink4NET.Tracking.InactivityTrackingStatus)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Tracking.PlayerTrackingStatusUpdateEventArgs"/> class.
            </summary>
            <param name="audioService">the audio service</param>
            <param name="player">the affected player (may be <see langword="null"/>)</param>
            <param name="trackingStatus">the new tracking status of the player</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="audioService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Tracking.PlayerTrackingStatusUpdateEventArgs.AudioService">
            <summary>
                Gets the audio service.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Tracking.PlayerTrackingStatusUpdateEventArgs.Player">
            <summary>
                Gets the affected player (may be <see langword="null"/>).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Tracking.PlayerTrackingStatusUpdateEventArgs.TrackingStatus">
            <summary>
                Gets the new tracking status of the player.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Util.StreamProviderUtil">
            <summary>
                An utility class for detecting the stream provider for a lavaplayer URI.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Util.StreamProviderUtil.GetStreamProvider(System.String)">
            <summary>
                Gets the stream provider that has the characters for the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">the uri</param>
            <returns>the stream provider</returns>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="uri"/> is blank.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Util.StreamProviderUtil.IsHttpStreamUrl(System.String)">
            <summary>
                Gets a value indicating whether the specified <paramref name="path"/> is a HTTP
                stream URL supported by lavaplayer.
            </summary>
            <param name="path">the URI path ( <see cref="P:System.Uri.AbsolutePath"/>)</param>
            <returns>
                a value indicating whether the specified <paramref name="path"/> is a HTTP stream URL
                supported by lavaplayer
            </returns>
        </member>
        <member name="M:Lavalink4NET.Util.StreamProviderUtil.GetStreamProvider(System.String,System.String)">
            <summary>
                Gets the stream provider that has the characters for the specified
                <paramref name="host"/> and <paramref name="path"/>.
            </summary>
            <param name="host">the host (e.g. www.youtube.com)</param>
            <param name="path">the watch (e.g. /watch?v=[...])</param>
            <returns>the stream provider</returns>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="host"/> is blank.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Lavalink4NET.Util.TimeSpanConverter">
            <summary>
                A Json.Net JSON converter between a milliseconds <see cref="T:System.Double"/> and a <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Util.TimeSpanConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.TimeSpan,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">
                The existing value of object being read. If there is no existing value then null will
                be used.
            </param>
            <param name="hasExistingValue">The existing value has a value.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Lavalink4NET.Util.TimeSpanConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.TimeSpan,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Lavalink4NET.VoiceServer">
            <summary>
                Represents the information for a discord voice server.
            </summary>
        </member>
        <member name="M:Lavalink4NET.VoiceServer.#ctor(System.UInt64,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.VoiceServer"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the update is for</param>
            <param name="token">
                the voice server token that is required for connecting to the voice endpoint
            </param>
            <param name="endpoint">the address of the voice server to connect to</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="token"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="endpoint"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.VoiceServer.GuildId">
            <summary>
                Gets the guild snowflake identifier the update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.VoiceServer.Token">
            <summary>
                Gets the voice server token that is required for connecting to the voice endpoint.
            </summary>
        </member>
        <member name="P:Lavalink4NET.VoiceServer.Endpoint">
            <summary>
                Gets the address of the voice server to connect to.
            </summary>
        </member>
        <member name="T:Lavalink4NET.VoiceState">
            <summary>
                Represents the information for a discord user voice state.
            </summary>
        </member>
        <member name="M:Lavalink4NET.VoiceState.#ctor(System.Nullable{System.UInt64},System.UInt64,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.VoiceState"/> class.
            </summary>
            <param name="voiceChannelId">the voice channel identifier</param>
            <param name="guildId">
                the guild snowflake identifier the voice state update is for
            </param>
            <param name="voiceSessionId">the voice session identifier</param>
        </member>
        <member name="P:Lavalink4NET.VoiceState.VoiceChannelId">
            <summary>
                Gets the voice channel identifier.
            </summary>
        </member>
        <member name="P:Lavalink4NET.VoiceState.GuildId">
            <summary>
                Gets the guild snowflake identifier the voice state update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.VoiceState.VoiceSessionId">
            <summary>
                Gets the voice session identifier.
            </summary>
        </member>
    </members>
</doc>
